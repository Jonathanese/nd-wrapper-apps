//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v23.5.0.0
//   At: 2023-02-28T00:11:35.3082339-05:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update JoySoftware.NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/v3/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<ClimateEntities>();
        serviceCollection.AddTransient<CoverEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<FanEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<LockEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<SceneEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<BackupServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<CastServices>();
        serviceCollection.AddTransient<CircadianLightingServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<MysensorsServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<PiHoleServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TeslaCustomServices>();
        serviceCollection.AddTransient<TextServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<WakeOnLanServices>();
        serviceCollection.AddTransient<ZoneServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    ClimateEntities Climate { get; }

    CoverEntities Cover { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    FanEntities Fan { get; }

    InputBooleanEntities InputBoolean { get; }

    LightEntities Light { get; }

    LockEntities Lock { get; }

    MediaPlayerEntities MediaPlayer { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    SceneEntities Scene { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    UpdateEntities Update { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public ClimateEntities Climate => new(_haContext);
    public CoverEntities Cover => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public FanEntities Fan => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public LightEntities Light => new(_haContext);
    public LockEntities Lock => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public SceneEntities Scene => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Door/Window Open Notification</summary>
    public AutomationEntity DoorWindowOpenNotification => new(_haContext, "automation.door_window_open_notification");
    ///<summary>Home Arrive</summary>
    public AutomationEntity HomeArrive => new(_haContext, "automation.home_arrive");
    ///<summary>Home Leave</summary>
    public AutomationEntity HomeLeave => new(_haContext, "automation.home_leave");
    ///<summary>Ozone Limit</summary>
    public AutomationEntity LimitOzone => new(_haContext, "automation.limit_ozone");
    ///<summary>Morning</summary>
    public AutomationEntity Morning => new(_haContext, "automation.morning");
    ///<summary>Notify Power Event</summary>
    public AutomationEntity NotifyPowerEvent => new(_haContext, "automation.notify_power_event");
    ///<summary>Work Arrive</summary>
    public AutomationEntity OzoneWork => new(_haContext, "automation.ozone_work");
    ///<summary>Reset WOL</summary>
    public AutomationEntity ResetWol => new(_haContext, "automation.reset_wol");
    ///<summary>Sunrise</summary>
    public AutomationEntity Sunrise => new(_haContext, "automation.sunrise");
    ///<summary>Sunset</summary>
    public AutomationEntity SunsetEvents => new(_haContext, "automation.sunset_events");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>1</summary>
    public BinarySensorEntity _1 => new(_haContext, "binary_sensor.1");
    ///<summary>10</summary>
    public BinarySensorEntity _10 => new(_haContext, "binary_sensor.10");
    ///<summary>13</summary>
    public BinarySensorEntity _13 => new(_haContext, "binary_sensor.13");
    ///<summary>15</summary>
    public BinarySensorEntity _15 => new(_haContext, "binary_sensor.15");
    ///<summary>16</summary>
    public BinarySensorEntity _16 => new(_haContext, "binary_sensor.16");
    ///<summary>2</summary>
    public BinarySensorEntity _2 => new(_haContext, "binary_sensor.2");
    ///<summary>4</summary>
    public BinarySensorEntity _4 => new(_haContext, "binary_sensor.4");
    ///<summary>5</summary>
    public BinarySensorEntity _5 => new(_haContext, "binary_sensor.5");
    ///<summary>6</summary>
    public BinarySensorEntity _6 => new(_haContext, "binary_sensor.6");
    ///<summary>9</summary>
    public BinarySensorEntity _9 => new(_haContext, "binary_sensor.9");
    ///<summary>Back Door</summary>
    public BinarySensorEntity BackDoor => new(_haContext, "binary_sensor.back_door");
    ///<summary>Front Door</summary>
    public BinarySensorEntity FrontDoor => new(_haContext, "binary_sensor.front_door");
    ///<summary>Front Window West</summary>
    public BinarySensorEntity FrontWindowWest => new(_haContext, "binary_sensor.front_window_west");
    ///<summary>Garage Door MyQ Gateway</summary>
    public BinarySensorEntity GarageDoorMyqGateway => new(_haContext, "binary_sensor.garage_door_myq_gateway");
    ///<summary>Jarvis Asleep</summary>
    public BinarySensorEntity JarvisAsleep => new(_haContext, "binary_sensor.jarvis_asleep");
    ///<summary>Jarvis Charger</summary>
    public BinarySensorEntity JarvisCharger => new(_haContext, "binary_sensor.jarvis_charger");
    ///<summary>Jarvis Charging</summary>
    public BinarySensorEntity JarvisCharging => new(_haContext, "binary_sensor.jarvis_charging");
    ///<summary>Jarvis Doors</summary>
    public BinarySensorEntity JarvisDoors => new(_haContext, "binary_sensor.jarvis_doors");
    ///<summary>Jarvis Online</summary>
    public BinarySensorEntity JarvisOnline => new(_haContext, "binary_sensor.jarvis_online");
    ///<summary>Jarvis Parking brake</summary>
    public BinarySensorEntity JarvisParkingBrake => new(_haContext, "binary_sensor.jarvis_parking_brake");
    ///<summary>Jarvis Scheduled charging</summary>
    public BinarySensorEntity JarvisScheduledCharging => new(_haContext, "binary_sensor.jarvis_scheduled_charging");
    ///<summary>Jarvis Scheduled departure</summary>
    public BinarySensorEntity JarvisScheduledDeparture => new(_haContext, "binary_sensor.jarvis_scheduled_departure");
    ///<summary>Jarvis User present</summary>
    public BinarySensorEntity JarvisUserPresent => new(_haContext, "binary_sensor.jarvis_user_present");
    ///<summary>Leak Mains battery low</summary>
    public BinarySensorEntity LeakMainsBatteryLow => new(_haContext, "binary_sensor.leak_mains_battery_low");
    ///<summary>Leak Mains water leak</summary>
    public BinarySensorEntity LeakMainsWaterLeak => new(_haContext, "binary_sensor.leak_mains_water_leak");
    ///<summary>Leak Sump battery low</summary>
    public BinarySensorEntity LeakSumpBatteryLow => new(_haContext, "binary_sensor.leak_sump_battery_low");
    ///<summary>Leak Sump water leak</summary>
    public BinarySensorEntity LeakSumpWaterLeak => new(_haContext, "binary_sensor.leak_sump_water_leak");
    ///<summary>Leak Window North battery low</summary>
    public BinarySensorEntity LeakWindowNorthBatteryLow => new(_haContext, "binary_sensor.leak_window_north_battery_low");
    ///<summary>Leak Window North water leak</summary>
    public BinarySensorEntity LeakWindowNorthWaterLeak => new(_haContext, "binary_sensor.leak_window_north_water_leak");
    ///<summary>Leak Window West battery low</summary>
    public BinarySensorEntity LeakWindowWestBatteryLow => new(_haContext, "binary_sensor.leak_window_west_battery_low");
    ///<summary>Leak Window West water leak</summary>
    public BinarySensorEntity LeakWindowWestWaterLeak => new(_haContext, "binary_sensor.leak_window_west_water_leak");
    ///<summary>Mudroom Door</summary>
    public BinarySensorEntity MudroomDoor => new(_haContext, "binary_sensor.mudroom_door");
    ///<summary>Pi-Hole</summary>
    public BinarySensorEntity PiHole => new(_haContext, "binary_sensor.pi_hole");
    ///<summary>Pixel 6 Pro Is Charging</summary>
    public BinarySensorEntity Pixel6ProIsCharging => new(_haContext, "binary_sensor.pixel_6_pro_is_charging");
    ///<summary>Remote UI</summary>
    public BinarySensorEntity RemoteUi => new(_haContext, "binary_sensor.remote_ui");
    ///<summary>Side Window North</summary>
    public BinarySensorEntity SideWindowNorth => new(_haContext, "binary_sensor.side_window_north");
    ///<summary>Side Window South</summary>
    public BinarySensorEntity SideWindowSouth => new(_haContext, "binary_sensor.side_window_south");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Jarvis Emissions test</summary>
    public ButtonEntity JarvisEmissionsTest => new(_haContext, "button.jarvis_emissions_test");
    ///<summary>Jarvis Flash lights</summary>
    public ButtonEntity JarvisFlashLights => new(_haContext, "button.jarvis_flash_lights");
    ///<summary>Jarvis Force data update</summary>
    public ButtonEntity JarvisForceDataUpdate => new(_haContext, "button.jarvis_force_data_update");
    ///<summary>Jarvis Homelink</summary>
    public ButtonEntity JarvisHomelink => new(_haContext, "button.jarvis_homelink");
    ///<summary>Jarvis Horn</summary>
    public ButtonEntity JarvisHorn => new(_haContext, "button.jarvis_horn");
    ///<summary>Jarvis Remote start</summary>
    public ButtonEntity JarvisRemoteStart => new(_haContext, "button.jarvis_remote_start");
    ///<summary>Jarvis Wake up</summary>
    public ButtonEntity JarvisWakeUp => new(_haContext, "button.jarvis_wake_up");
}

public partial class ClimateEntities
{
    private readonly IHaContext _haContext;
    public ClimateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Jarvis Hvac (climate) system</summary>
    public ClimateEntity JarvisHvacClimateSystem => new(_haContext, "climate.jarvis_hvac_climate_system");
}

public partial class CoverEntities
{
    private readonly IHaContext _haContext;
    public CoverEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Blind Kitchen Center</summary>
    public CoverEntity BlindKitchenCenter => new(_haContext, "cover.blind_kitchen_center");
    ///<summary>Blind Kitchen Left</summary>
    public CoverEntity BlindKitchenLeft => new(_haContext, "cover.blind_kitchen_left");
    ///<summary>Blind Kitchen Right</summary>
    public CoverEntity BlindKitchenRight => new(_haContext, "cover.blind_kitchen_right");
    ///<summary>Blind Living Room Center</summary>
    public CoverEntity BlindLivingRoomCenter => new(_haContext, "cover.blind_living_room_center");
    ///<summary>Blind Living Room Left</summary>
    public CoverEntity BlindLivingRoomLeft => new(_haContext, "cover.blind_living_room_left");
    ///<summary>Blind Living Room Right</summary>
    public CoverEntity BlindLivingRoomRight => new(_haContext, "cover.blind_living_room_right");
    ///<summary>Garage Door</summary>
    public CoverEntity GarageDoor => new(_haContext, "cover.garage_door");
    ///<summary>Group.AllBlinds</summary>
    public CoverEntity GroupAllblinds => new(_haContext, "cover.group_allblinds");
    ///<summary>Kitchen Blinds</summary>
    public CoverEntity GroupKitchenBlinds => new(_haContext, "cover.group_kitchen_blinds");
    ///<summary>Living Room Blinds</summary>
    public CoverEntity GroupLivingRoomBlinds => new(_haContext, "cover.group_living_room_blinds");
    ///<summary>Jarvis Charger door</summary>
    public CoverEntity JarvisChargerDoor => new(_haContext, "cover.jarvis_charger_door");
    ///<summary>Jarvis Frunk</summary>
    public CoverEntity JarvisFrunk => new(_haContext, "cover.jarvis_frunk");
    ///<summary>Jarvis Trunk</summary>
    public CoverEntity JarvisTrunk => new(_haContext, "cover.jarvis_trunk");
    ///<summary>Jarvis Windows</summary>
    public CoverEntity JarvisWindows => new(_haContext, "cover.jarvis_windows");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Jarvis Destination location tracker</summary>
    public DeviceTrackerEntity JarvisDestinationLocationTracker => new(_haContext, "device_tracker.jarvis_destination_location_tracker");
    ///<summary>Jarvis Location tracker</summary>
    public DeviceTrackerEntity JarvisLocationTracker => new(_haContext, "device_tracker.jarvis_location_tracker");
    ///<summary>Pixel 6 Pro</summary>
    public DeviceTrackerEntity Pixel6Pro => new(_haContext, "device_tracker.pixel_6_pro");
}

public partial class FanEntities
{
    private readonly IHaContext _haContext;
    public FanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Master Bedroom Ceiling Fan</summary>
    public FanEntity MasterBedroomCeilingFan => new(_haContext, "fan.master_bedroom_ceiling_fan");
    ///<summary>Office Ceiling Fan</summary>
    public FanEntity OfficeCeilingFan => new(_haContext, "fan.office_ceiling_fan");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>netdaemon_net_daemon_wrapper_context</summary>
    public InputBooleanEntity NetdaemonNetDaemonWrapperContext => new(_haContext, "input_boolean.netdaemon_net_daemon_wrapper_context");
    ///<summary>netdaemon_net_daemon_wrapper_event_state_change_actions</summary>
    public InputBooleanEntity NetdaemonNetDaemonWrapperEventStateChangeActions => new(_haContext, "input_boolean.netdaemon_net_daemon_wrapper_event_state_change_actions");
    ///<summary>netdaemon_net_daemon_wrapper_gradient_manager</summary>
    public InputBooleanEntity NetdaemonNetDaemonWrapperGradientManager => new(_haContext, "input_boolean.netdaemon_net_daemon_wrapper_gradient_manager");
    ///<summary>netdaemon_net_daemon_wrapper_lighting_light_manager</summary>
    public InputBooleanEntity NetdaemonNetDaemonWrapperLightingLightManager => new(_haContext, "input_boolean.netdaemon_net_daemon_wrapper_lighting_light_manager");
    ///<summary>netdaemon_net_daemon_wrapper_scene_basic_scenes</summary>
    public InputBooleanEntity NetdaemonNetDaemonWrapperSceneBasicScenes => new(_haContext, "input_boolean.netdaemon_net_daemon_wrapper_scene_basic_scenes");
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bedroom Ceiling</summary>
    public LightEntity BedroomCeiling => new(_haContext, "light.bedroom_ceiling");
    ///<summary>Bedroom Fan Light</summary>
    public LightEntity BedroomFanLight => new(_haContext, "light.bedroom_fan_light");
    ///<summary>Bedroom Left</summary>
    public LightEntity BedroomLeft => new(_haContext, "light.bedroom_left");
    ///<summary>Bedroom Right</summary>
    public LightEntity BedroomRight => new(_haContext, "light.bedroom_right");
    ///<summary>Breakfast</summary>
    public LightEntity Breakfast => new(_haContext, "light.breakfast");
    ///<summary>Ceiling</summary>
    public LightEntity Ceiling => new(_haContext, "light.ceiling");
    ///<summary>Dining Room</summary>
    public LightEntity DiningRoom => new(_haContext, "light.dining_room");
    ///<summary>Dining Room Floor</summary>
    public LightEntity DiningRoomFloor => new(_haContext, "light.dining_room_floor");
    ///<summary>Entry</summary>
    public LightEntity Entry => new(_haContext, "light.entry");
    ///<summary>Group.AllLights</summary>
    public LightEntity GroupAlllights => new(_haContext, "light.group_alllights");
    ///<summary>Hall Overlook</summary>
    public LightEntity HallOverlook => new(_haContext, "light.hall_overlook");
    ///<summary>Hall Stair</summary>
    public LightEntity HallStair => new(_haContext, "light.hall_stair");
    ///<summary>Island 1</summary>
    public LightEntity Island1 => new(_haContext, "light.island_1");
    ///<summary>Island 2</summary>
    public LightEntity Island2 => new(_haContext, "light.island_2");
    ///<summary>Island 3</summary>
    public LightEntity Island3 => new(_haContext, "light.island_3");
    ///<summary>Island 4</summary>
    public LightEntity Island4 => new(_haContext, "light.island_4");
    ///<summary>Kitchen Sink</summary>
    public LightEntity KitchenSink => new(_haContext, "light.kitchen_sink");
    ///<summary>Living Room Corner</summary>
    public LightEntity LivingRoomCorner => new(_haContext, "light.living_room_corner");
    ///<summary>Living Room Floor 1</summary>
    public LightEntity LivingRoomFloor1 => new(_haContext, "light.living_room_floor_1");
    ///<summary>Living Room Floor 2</summary>
    public LightEntity LivingRoomFloor2 => new(_haContext, "light.living_room_floor_2");
    ///<summary>Living Room Floor 3</summary>
    public LightEntity LivingRoomFloor3 => new(_haContext, "light.living_room_floor_3");
    ///<summary>Living Room Table 1</summary>
    public LightEntity LivingRoomTable1 => new(_haContext, "light.living_room_table_1");
    ///<summary>Living Room Table 2</summary>
    public LightEntity LivingRoomTable2 => new(_haContext, "light.living_room_table_2");
    ///<summary>Living Room Table 3</summary>
    public LightEntity LivingRoomTable3 => new(_haContext, "light.living_room_table_3");
    ///<summary>Office Main Lights</summary>
    public LightEntity OfficeMainLights => new(_haContext, "light.office_main_lights");
    ///<summary>Pole</summary>
    public LightEntity Pole => new(_haContext, "light.pole");
    ///<summary>Sign</summary>
    public LightEntity Sign => new(_haContext, "light.sign");
    ///<summary>Stair 1</summary>
    public LightEntity Stair1 => new(_haContext, "light.stair_1");
    ///<summary>Stair 2</summary>
    public LightEntity Stair2 => new(_haContext, "light.stair_2");
    ///<summary>Studio Down</summary>
    public LightEntity StudioDown => new(_haContext, "light.studio_down");
    ///<summary>Studio Up</summary>
    public LightEntity StudioUp => new(_haContext, "light.studio_up");
    ///<summary>TV Stand</summary>
    public LightEntity TvStand => new(_haContext, "light.tv_stand");
}

public partial class LockEntities
{
    private readonly IHaContext _haContext;
    public LockEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Jarvis Charge port latch</summary>
    public LockEntity JarvisChargePortLatch => new(_haContext, "lock.jarvis_charge_port_latch");
    ///<summary>Jarvis Doors</summary>
    public LockEntity JarvisDoors => new(_haContext, "lock.jarvis_doors");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bedroom speaker</summary>
    public MediaPlayerEntity BedroomSpeaker => new(_haContext, "media_player.bedroom_speaker");
    ///<summary>Living Room Assistant</summary>
    public MediaPlayerEntity LivingRoomAssistant => new(_haContext, "media_player.living_room_assistant");
    ///<summary>SHIELD</summary>
    public MediaPlayerEntity Shield => new(_haContext, "media_player.shield");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Jarvis Charge limit</summary>
    public NumberEntity JarvisChargeLimit => new(_haContext, "number.jarvis_charge_limit");
    ///<summary>Jarvis Charging amps</summary>
    public NumberEntity JarvisChargingAmps => new(_haContext, "number.jarvis_charging_amps");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Jonathan</summary>
    public PersonEntity Jonathan => new(_haContext, "person.jonathan");
}

public partial class SceneEntities
{
    private readonly IHaContext _haContext;
    public SceneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>DuskDawn</summary>
    public SceneEntity Duskdawn => new(_haContext, "scene.duskdawn");
    ///<summary>Night Light Dynamic</summary>
    public SceneEntity NightLightDynamic => new(_haContext, "scene.night_light_dynamic");
    ///<summary>Normal Lights</summary>
    public SceneEntity NormalLights => new(_haContext, "scene.normal_lights");
    ///<summary>Random Colors</summary>
    public SceneEntity RandomColors => new(_haContext, "scene.random_colors");
    ///<summary>Spatial Demo</summary>
    public SceneEntity SpatialDemo => new(_haContext, "scene.spatial_demo");
    ///<summary>Spatial Gradient Demo</summary>
    public SceneEntity SpatialGradientDemo => new(_haContext, "scene.spatial_gradient_demo");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bedroom Fan Light power on behavior</summary>
    public SelectEntity BedroomFanLightPowerOnBehavior => new(_haContext, "select.bedroom_fan_light_power_on_behavior");
    ///<summary>Bedroom Left power on behavior</summary>
    public SelectEntity BedroomLeftPowerOnBehavior => new(_haContext, "select.bedroom_left_power_on_behavior");
    ///<summary>Bedroom Right power on behavior</summary>
    public SelectEntity BedroomRightPowerOnBehavior => new(_haContext, "select.bedroom_right_power_on_behavior");
    ///<summary>Breakfast power on behavior</summary>
    public SelectEntity BreakfastPowerOnBehavior => new(_haContext, "select.breakfast_power_on_behavior");
    ///<summary>Dining Room Floor power on behavior</summary>
    public SelectEntity DiningRoomFloorPowerOnBehavior => new(_haContext, "select.dining_room_floor_power_on_behavior");
    ///<summary>Entry power on behavior</summary>
    public SelectEntity EntryPowerOnBehavior => new(_haContext, "select.entry_power_on_behavior");
    ///<summary>Hall Overlook power on behavior</summary>
    public SelectEntity HallOverlookPowerOnBehavior => new(_haContext, "select.hall_overlook_power_on_behavior");
    ///<summary>Hall Stair power on behavior</summary>
    public SelectEntity HallStairPowerOnBehavior => new(_haContext, "select.hall_stair_power_on_behavior");
    ///<summary>Island 1 power on behavior</summary>
    public SelectEntity Island1PowerOnBehavior => new(_haContext, "select.island_1_power_on_behavior");
    ///<summary>Island 2 power on behavior</summary>
    public SelectEntity Island2PowerOnBehavior => new(_haContext, "select.island_2_power_on_behavior");
    ///<summary>Island 3 power on behavior</summary>
    public SelectEntity Island3PowerOnBehavior => new(_haContext, "select.island_3_power_on_behavior");
    ///<summary>Island 4 power on behavior</summary>
    public SelectEntity Island4PowerOnBehavior => new(_haContext, "select.island_4_power_on_behavior");
    ///<summary>Jarvis Cabin overheat protection</summary>
    public SelectEntity JarvisCabinOverheatProtection => new(_haContext, "select.jarvis_cabin_overheat_protection");
    ///<summary>Jarvis Heated seat left</summary>
    public SelectEntity JarvisHeatedSeatLeft => new(_haContext, "select.jarvis_heated_seat_left");
    ///<summary>Jarvis Heated seat rear center</summary>
    public SelectEntity JarvisHeatedSeatRearCenter => new(_haContext, "select.jarvis_heated_seat_rear_center");
    ///<summary>Jarvis Heated seat rear left</summary>
    public SelectEntity JarvisHeatedSeatRearLeft => new(_haContext, "select.jarvis_heated_seat_rear_left");
    ///<summary>Jarvis Heated seat rear right</summary>
    public SelectEntity JarvisHeatedSeatRearRight => new(_haContext, "select.jarvis_heated_seat_rear_right");
    ///<summary>Jarvis Heated seat right</summary>
    public SelectEntity JarvisHeatedSeatRight => new(_haContext, "select.jarvis_heated_seat_right");
    ///<summary>Kitchen Sink power on behavior</summary>
    public SelectEntity KitchenSinkPowerOnBehavior => new(_haContext, "select.kitchen_sink_power_on_behavior");
    ///<summary>Living Room Corner power on behavior</summary>
    public SelectEntity LivingRoomCornerPowerOnBehavior => new(_haContext, "select.living_room_corner_power_on_behavior");
    ///<summary>Living Room Floor 1 power on behavior</summary>
    public SelectEntity LivingRoomFloor1PowerOnBehavior => new(_haContext, "select.living_room_floor_1_power_on_behavior");
    ///<summary>Living Room Floor 2 power on behavior</summary>
    public SelectEntity LivingRoomFloor2PowerOnBehavior => new(_haContext, "select.living_room_floor_2_power_on_behavior");
    ///<summary>Living Room Floor 3 power on behavior</summary>
    public SelectEntity LivingRoomFloor3PowerOnBehavior => new(_haContext, "select.living_room_floor_3_power_on_behavior");
    ///<summary>Living Room Table 1 power on behavior</summary>
    public SelectEntity LivingRoomTable1PowerOnBehavior => new(_haContext, "select.living_room_table_1_power_on_behavior");
    ///<summary>Living Room Table 2 power on behavior</summary>
    public SelectEntity LivingRoomTable2PowerOnBehavior => new(_haContext, "select.living_room_table_2_power_on_behavior");
    ///<summary>Living Room Table 3 power on behavior</summary>
    public SelectEntity LivingRoomTable3PowerOnBehavior => new(_haContext, "select.living_room_table_3_power_on_behavior");
    ///<summary>Stair 1 power on behavior</summary>
    public SelectEntity Stair1PowerOnBehavior => new(_haContext, "select.stair_1_power_on_behavior");
    ///<summary>Stair 2 power on behavior</summary>
    public SelectEntity Stair2PowerOnBehavior => new(_haContext, "select.stair_2_power_on_behavior");
    ///<summary>Studio Down power on behavior</summary>
    public SelectEntity StudioDownPowerOnBehavior => new(_haContext, "select.studio_down_power_on_behavior");
    ///<summary>Studio Up power on behavior</summary>
    public SelectEntity StudioUpPowerOnBehavior => new(_haContext, "select.studio_up_power_on_behavior");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Jarvis Arrival time</summary>
    public SensorEntity JarvisArrivalTime => new(_haContext, "sensor.jarvis_arrival_time");
    ///<summary>Jarvis Time charge complete</summary>
    public SensorEntity JarvisTimeChargeComplete => new(_haContext, "sensor.jarvis_time_charge_complete");
    ///<summary>Leak Mains power outage count</summary>
    public SensorEntity LeakMainsPowerOutageCount => new(_haContext, "sensor.leak_mains_power_outage_count");
    ///<summary>Leak Sump power outage count</summary>
    public SensorEntity LeakSumpPowerOutageCount => new(_haContext, "sensor.leak_sump_power_outage_count");
    ///<summary>Leak Window North power outage count</summary>
    public SensorEntity LeakWindowNorthPowerOutageCount => new(_haContext, "sensor.leak_window_north_power_outage_count");
    ///<summary>Leak Window West power outage count</summary>
    public SensorEntity LeakWindowWestPowerOutageCount => new(_haContext, "sensor.leak_window_west_power_outage_count");
    ///<summary>Pixel 6 Pro Battery Health</summary>
    public SensorEntity Pixel6ProBatteryHealth => new(_haContext, "sensor.pixel_6_pro_battery_health");
    ///<summary>Pixel 6 Pro Battery State</summary>
    public SensorEntity Pixel6ProBatteryState => new(_haContext, "sensor.pixel_6_pro_battery_state");
    ///<summary>Pixel 6 Pro Charger Type</summary>
    public SensorEntity Pixel6ProChargerType => new(_haContext, "sensor.pixel_6_pro_charger_type");
    ///<summary>Ups Self-Test Result</summary>
    public SensorEntity UpsSelfTestResult => new(_haContext, "sensor.ups_self_test_result");
    ///<summary>Ups Status</summary>
    public SensorEntity UpsStatus => new(_haContext, "sensor.ups_status");
    ///<summary>Ups Status Data</summary>
    public SensorEntity UpsStatusData => new(_haContext, "sensor.ups_status_data");
    ///<summary>Blind Kitchen Center battery</summary>
    public NumericSensorEntity BlindKitchenCenterBattery => new(_haContext, "sensor.blind_kitchen_center_battery");
    ///<summary>Blind Kitchen Left battery</summary>
    public NumericSensorEntity BlindKitchenLeftBattery => new(_haContext, "sensor.blind_kitchen_left_battery");
    ///<summary>Blind Kitchen Right battery</summary>
    public NumericSensorEntity BlindKitchenRightBattery => new(_haContext, "sensor.blind_kitchen_right_battery");
    ///<summary>Blind Living Room Center battery</summary>
    public NumericSensorEntity BlindLivingRoomCenterBattery => new(_haContext, "sensor.blind_living_room_center_battery");
    ///<summary>Blind Living Room Left battery</summary>
    public NumericSensorEntity BlindLivingRoomLeftBattery => new(_haContext, "sensor.blind_living_room_left_battery");
    ///<summary>Blind Living Room Right battery</summary>
    public NumericSensorEntity BlindLivingRoomRightBattery => new(_haContext, "sensor.blind_living_room_right_battery");
    ///<summary>Circadian Values</summary>
    public NumericSensorEntity CircadianValues => new(_haContext, "sensor.circadian_values");
    ///<summary>hacs</summary>
    public NumericSensorEntity Hacs => new(_haContext, "sensor.hacs");
    ///<summary>Jarvis Battery</summary>
    public NumericSensorEntity JarvisBattery => new(_haContext, "sensor.jarvis_battery");
    ///<summary>Jarvis Charger power</summary>
    public NumericSensorEntity JarvisChargerPower => new(_haContext, "sensor.jarvis_charger_power");
    ///<summary>Jarvis Charging rate</summary>
    public NumericSensorEntity JarvisChargingRate => new(_haContext, "sensor.jarvis_charging_rate");
    ///<summary>Jarvis Distance to arrival</summary>
    public NumericSensorEntity JarvisDistanceToArrival => new(_haContext, "sensor.jarvis_distance_to_arrival");
    ///<summary>Jarvis Energy added</summary>
    public NumericSensorEntity JarvisEnergyAdded => new(_haContext, "sensor.jarvis_energy_added");
    ///<summary>Jarvis Odometer</summary>
    public NumericSensorEntity JarvisOdometer => new(_haContext, "sensor.jarvis_odometer");
    ///<summary>Jarvis Range</summary>
    public NumericSensorEntity JarvisRange => new(_haContext, "sensor.jarvis_range");
    ///<summary>Jarvis Temperature (inside)</summary>
    public NumericSensorEntity JarvisTemperatureInside => new(_haContext, "sensor.jarvis_temperature_inside");
    ///<summary>Jarvis Temperature (outside)</summary>
    public NumericSensorEntity JarvisTemperatureOutside => new(_haContext, "sensor.jarvis_temperature_outside");
    ///<summary>Jarvis Tpms front left</summary>
    public NumericSensorEntity JarvisTpmsFrontLeft => new(_haContext, "sensor.jarvis_tpms_front_left");
    ///<summary>Jarvis Tpms front right</summary>
    public NumericSensorEntity JarvisTpmsFrontRight => new(_haContext, "sensor.jarvis_tpms_front_right");
    ///<summary>Jarvis Tpms rear left</summary>
    public NumericSensorEntity JarvisTpmsRearLeft => new(_haContext, "sensor.jarvis_tpms_rear_left");
    ///<summary>Jarvis Tpms rear right</summary>
    public NumericSensorEntity JarvisTpmsRearRight => new(_haContext, "sensor.jarvis_tpms_rear_right");
    ///<summary>Leak Mains battery</summary>
    public NumericSensorEntity LeakMainsBattery => new(_haContext, "sensor.leak_mains_battery");
    ///<summary>Leak Mains device temperature</summary>
    public NumericSensorEntity LeakMainsDeviceTemperature => new(_haContext, "sensor.leak_mains_device_temperature");
    ///<summary>Leak Sump battery</summary>
    public NumericSensorEntity LeakSumpBattery => new(_haContext, "sensor.leak_sump_battery");
    ///<summary>Leak Sump device temperature</summary>
    public NumericSensorEntity LeakSumpDeviceTemperature => new(_haContext, "sensor.leak_sump_device_temperature");
    ///<summary>Leak Window North battery</summary>
    public NumericSensorEntity LeakWindowNorthBattery => new(_haContext, "sensor.leak_window_north_battery");
    ///<summary>Leak Window North device temperature</summary>
    public NumericSensorEntity LeakWindowNorthDeviceTemperature => new(_haContext, "sensor.leak_window_north_device_temperature");
    ///<summary>Leak Window West battery</summary>
    public NumericSensorEntity LeakWindowWestBattery => new(_haContext, "sensor.leak_window_west_battery");
    ///<summary>Leak Window West device temperature</summary>
    public NumericSensorEntity LeakWindowWestDeviceTemperature => new(_haContext, "sensor.leak_window_west_device_temperature");
    ///<summary>Memory use</summary>
    public NumericSensorEntity MemoryUse => new(_haContext, "sensor.memory_use");
    ///<summary>Memory use (percent)</summary>
    public NumericSensorEntity MemoryUsePercent => new(_haContext, "sensor.memory_use_percent");
    ///<summary>PC Current</summary>
    public NumericSensorEntity PcCurrent => new(_haContext, "sensor.pc_current");
    ///<summary>PC Current Consumption</summary>
    public NumericSensorEntity PcCurrentConsumption => new(_haContext, "sensor.pc_current_consumption");
    ///<summary>PC Today's Consumption</summary>
    public NumericSensorEntity PcTodaySConsumption => new(_haContext, "sensor.pc_today_s_consumption");
    ///<summary>PC Total Consumption</summary>
    public NumericSensorEntity PcTotalConsumption => new(_haContext, "sensor.pc_total_consumption");
    ///<summary>PC Voltage</summary>
    public NumericSensorEntity PcVoltage => new(_haContext, "sensor.pc_voltage");
    ///<summary>Pi-Hole Ads Blocked Today</summary>
    public NumericSensorEntity PiHoleAdsBlockedToday => new(_haContext, "sensor.pi_hole_ads_blocked_today");
    ///<summary>Pi-Hole Ads Percentage Blocked Today</summary>
    public NumericSensorEntity PiHoleAdsPercentageBlockedToday => new(_haContext, "sensor.pi_hole_ads_percentage_blocked_today");
    ///<summary>Pi-Hole DNS Queries Cached</summary>
    public NumericSensorEntity PiHoleDnsQueriesCached => new(_haContext, "sensor.pi_hole_dns_queries_cached");
    ///<summary>Pi-Hole DNS Queries Forwarded</summary>
    public NumericSensorEntity PiHoleDnsQueriesForwarded => new(_haContext, "sensor.pi_hole_dns_queries_forwarded");
    ///<summary>Pi-Hole DNS Queries Today</summary>
    public NumericSensorEntity PiHoleDnsQueriesToday => new(_haContext, "sensor.pi_hole_dns_queries_today");
    ///<summary>Pi-Hole DNS Unique Clients</summary>
    public NumericSensorEntity PiHoleDnsUniqueClients => new(_haContext, "sensor.pi_hole_dns_unique_clients");
    ///<summary>Pi-Hole DNS Unique Domains</summary>
    public NumericSensorEntity PiHoleDnsUniqueDomains => new(_haContext, "sensor.pi_hole_dns_unique_domains");
    ///<summary>Pi-Hole Domains Blocked</summary>
    public NumericSensorEntity PiHoleDomainsBlocked => new(_haContext, "sensor.pi_hole_domains_blocked");
    ///<summary>Pi-Hole Seen Clients</summary>
    public NumericSensorEntity PiHoleSeenClients => new(_haContext, "sensor.pi_hole_seen_clients");
    ///<summary>Pixel 6 Pro Battery Level</summary>
    public NumericSensorEntity Pixel6ProBatteryLevel => new(_haContext, "sensor.pixel_6_pro_battery_level");
    ///<summary>Pixel 6 Pro Battery Power</summary>
    public NumericSensorEntity Pixel6ProBatteryPower => new(_haContext, "sensor.pixel_6_pro_battery_power");
    ///<summary>Pixel 6 Pro Battery Temperature</summary>
    public NumericSensorEntity Pixel6ProBatteryTemperature => new(_haContext, "sensor.pixel_6_pro_battery_temperature");
    ///<summary>Processor temperature</summary>
    public NumericSensorEntity ProcessorTemperature => new(_haContext, "sensor.processor_temperature");
    ///<summary>Processor use</summary>
    public NumericSensorEntity ProcessorUse => new(_haContext, "sensor.processor_use");
    ///<summary>Temperature AVG</summary>
    public NumericSensorEntity TemperatureAvg => new(_haContext, "sensor.temperature_avg");
    ///<summary>TH Guest Bedroom battery</summary>
    public NumericSensorEntity ThGuestBedroomBattery => new(_haContext, "sensor.th_guest_bedroom_battery");
    ///<summary>TH Guest Bedroom humidity</summary>
    public NumericSensorEntity ThGuestBedroomHumidity => new(_haContext, "sensor.th_guest_bedroom_humidity");
    ///<summary>TH Guest Bedroom pressure</summary>
    public NumericSensorEntity ThGuestBedroomPressure => new(_haContext, "sensor.th_guest_bedroom_pressure");
    ///<summary>TH Guest Bedroom temperature</summary>
    public NumericSensorEntity ThGuestBedroomTemperature => new(_haContext, "sensor.th_guest_bedroom_temperature");
    ///<summary>TH Living Room battery</summary>
    public NumericSensorEntity ThLivingRoomBattery => new(_haContext, "sensor.th_living_room_battery");
    ///<summary>TH Living Room humidity</summary>
    public NumericSensorEntity ThLivingRoomHumidity => new(_haContext, "sensor.th_living_room_humidity");
    ///<summary>TH Living Room pressure</summary>
    public NumericSensorEntity ThLivingRoomPressure => new(_haContext, "sensor.th_living_room_pressure");
    ///<summary>TH Living Room temperature</summary>
    public NumericSensorEntity ThLivingRoomTemperature => new(_haContext, "sensor.th_living_room_temperature");
    ///<summary>TH Master Bedroom battery</summary>
    public NumericSensorEntity ThMasterBedroomBattery => new(_haContext, "sensor.th_master_bedroom_battery");
    ///<summary>TH Master Bedroom humidity</summary>
    public NumericSensorEntity ThMasterBedroomHumidity => new(_haContext, "sensor.th_master_bedroom_humidity");
    ///<summary>TH Master Bedroom pressure</summary>
    public NumericSensorEntity ThMasterBedroomPressure => new(_haContext, "sensor.th_master_bedroom_pressure");
    ///<summary>TH Master Bedroom temperature</summary>
    public NumericSensorEntity ThMasterBedroomTemperature => new(_haContext, "sensor.th_master_bedroom_temperature");
    ///<summary>TH Office battery</summary>
    public NumericSensorEntity ThOfficeBattery => new(_haContext, "sensor.th_office_battery");
    ///<summary>TH Office humidity</summary>
    public NumericSensorEntity ThOfficeHumidity => new(_haContext, "sensor.th_office_humidity");
    ///<summary>TH Office pressure</summary>
    public NumericSensorEntity ThOfficePressure => new(_haContext, "sensor.th_office_pressure");
    ///<summary>TH Office temperature</summary>
    public NumericSensorEntity ThOfficeTemperature => new(_haContext, "sensor.th_office_temperature");
    ///<summary>TH Studio battery</summary>
    public NumericSensorEntity ThStudioBattery => new(_haContext, "sensor.th_studio_battery");
    ///<summary>TH Studio humidity</summary>
    public NumericSensorEntity ThStudioHumidity => new(_haContext, "sensor.th_studio_humidity");
    ///<summary>TH Studio pressure</summary>
    public NumericSensorEntity ThStudioPressure => new(_haContext, "sensor.th_studio_pressure");
    ///<summary>TH Studio temperature</summary>
    public NumericSensorEntity ThStudioTemperature => new(_haContext, "sensor.th_studio_temperature");
    ///<summary>Ups Battery Charge</summary>
    public NumericSensorEntity UpsBatteryCharge => new(_haContext, "sensor.ups_battery_charge");
    ///<summary>Ups Battery Voltage</summary>
    public NumericSensorEntity UpsBatteryVoltage => new(_haContext, "sensor.ups_battery_voltage");
    ///<summary>Ups High Voltage Transfer</summary>
    public NumericSensorEntity UpsHighVoltageTransfer => new(_haContext, "sensor.ups_high_voltage_transfer");
    ///<summary>Ups Input Voltage</summary>
    public NumericSensorEntity UpsInputVoltage => new(_haContext, "sensor.ups_input_voltage");
    ///<summary>Ups Load</summary>
    public NumericSensorEntity UpsLoad => new(_haContext, "sensor.ups_load");
    ///<summary>Ups Low Battery Setpoint</summary>
    public NumericSensorEntity UpsLowBatterySetpoint => new(_haContext, "sensor.ups_low_battery_setpoint");
    ///<summary>Ups Low Voltage Transfer</summary>
    public NumericSensorEntity UpsLowVoltageTransfer => new(_haContext, "sensor.ups_low_voltage_transfer");
    ///<summary>Ups Output Voltage</summary>
    public NumericSensorEntity UpsOutputVoltage => new(_haContext, "sensor.ups_output_voltage");
    ///<summary>Ups Warning Battery Setpoint</summary>
    public NumericSensorEntity UpsWarningBatterySetpoint => new(_haContext, "sensor.ups_warning_battery_setpoint");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bedroom Heat</summary>
    public SwitchEntity BedroomHeat => new(_haContext, "switch.bedroom_heat");
    ///<summary>Dining Room LED</summary>
    public SwitchEntity DiningRoomLed => new(_haContext, "switch.dining_room_led");
    ///<summary>Ground Lights</summary>
    public SwitchEntity GroundLights => new(_haContext, "switch.ground_lights");
    ///<summary>Jarvis Charger</summary>
    public SwitchEntity JarvisCharger => new(_haContext, "switch.jarvis_charger");
    ///<summary>Jarvis Heated steering</summary>
    public SwitchEntity JarvisHeatedSteering => new(_haContext, "switch.jarvis_heated_steering");
    ///<summary>Jarvis Polling</summary>
    public SwitchEntity JarvisPolling => new(_haContext, "switch.jarvis_polling");
    ///<summary>Jarvis Sentry mode</summary>
    public SwitchEntity JarvisSentryMode => new(_haContext, "switch.jarvis_sentry_mode");
    ///<summary>Jarvis Valet mode</summary>
    public SwitchEntity JarvisValetMode => new(_haContext, "switch.jarvis_valet_mode");
    ///<summary>Ozone</summary>
    public SwitchEntity Modem => new(_haContext, "switch.modem");
    ///<summary>Ozone LED</summary>
    public SwitchEntity ModemLed => new(_haContext, "switch.modem_led");
    ///<summary>PC</summary>
    public SwitchEntity Pc => new(_haContext, "switch.pc");
    ///<summary>PC LED</summary>
    public SwitchEntity PcLed => new(_haContext, "switch.pc_led");
    ///<summary>Pi-Hole</summary>
    public SwitchEntity PiHole => new(_haContext, "switch.pi_hole");
    ///<summary>String Lights</summary>
    public SwitchEntity StringLights => new(_haContext, "switch.string_lights");
    ///<summary>TP-LINK_Smart Plug_3ADF LED</summary>
    public SwitchEntity TpLinkSmartPlug3adfLed => new(_haContext, "switch.tp_link_smart_plug_3adf_led");
    ///<summary>Wake on LAN</summary>
    public SwitchEntity WakeOnLan => new(_haContext, "switch.wake_on_lan");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bedroom Fan Light</summary>
    public UpdateEntity BedroomFanLight => new(_haContext, "update.bedroom_fan_light");
    ///<summary>Bedroom Left</summary>
    public UpdateEntity BedroomLeft => new(_haContext, "update.bedroom_left");
    ///<summary>Bedroom Right</summary>
    public UpdateEntity BedroomRight => new(_haContext, "update.bedroom_right");
    ///<summary>Blind Kitchen Center</summary>
    public UpdateEntity BlindKitchenCenter => new(_haContext, "update.blind_kitchen_center");
    ///<summary>Blind Kitchen Left</summary>
    public UpdateEntity BlindKitchenLeft => new(_haContext, "update.blind_kitchen_left");
    ///<summary>Blind Kitchen Right</summary>
    public UpdateEntity BlindKitchenRight => new(_haContext, "update.blind_kitchen_right");
    ///<summary>Blind Living Room Center</summary>
    public UpdateEntity BlindLivingRoomCenter => new(_haContext, "update.blind_living_room_center");
    ///<summary>Blind Living Room Left</summary>
    public UpdateEntity BlindLivingRoomLeft => new(_haContext, "update.blind_living_room_left");
    ///<summary>Blind Living Room Right</summary>
    public UpdateEntity BlindLivingRoomRight => new(_haContext, "update.blind_living_room_right");
    ///<summary>Breakfast</summary>
    public UpdateEntity Breakfast => new(_haContext, "update.breakfast");
    ///<summary>Dining Room Floor</summary>
    public UpdateEntity DiningRoomFloor => new(_haContext, "update.dining_room_floor");
    ///<summary>Entry</summary>
    public UpdateEntity Entry => new(_haContext, "update.entry");
    ///<summary>Hall Overlook</summary>
    public UpdateEntity HallOverlook => new(_haContext, "update.hall_overlook");
    ///<summary>Hall Stair</summary>
    public UpdateEntity HallStair => new(_haContext, "update.hall_stair");
    ///<summary>Island 1</summary>
    public UpdateEntity Island1 => new(_haContext, "update.island_1");
    ///<summary>Island 2</summary>
    public UpdateEntity Island2 => new(_haContext, "update.island_2");
    ///<summary>Island 3</summary>
    public UpdateEntity Island3 => new(_haContext, "update.island_3");
    ///<summary>Island 4</summary>
    public UpdateEntity Island4 => new(_haContext, "update.island_4");
    ///<summary>Jarvis Software update</summary>
    public UpdateEntity JarvisSoftwareUpdate => new(_haContext, "update.jarvis_software_update");
    ///<summary>Kitchen Sink</summary>
    public UpdateEntity KitchenSink => new(_haContext, "update.kitchen_sink");
    ///<summary>Living Room Corner</summary>
    public UpdateEntity LivingRoomCorner => new(_haContext, "update.living_room_corner");
    ///<summary>Living Room Floor 1</summary>
    public UpdateEntity LivingRoomFloor1 => new(_haContext, "update.living_room_floor_1");
    ///<summary>Living Room Floor 2</summary>
    public UpdateEntity LivingRoomFloor2 => new(_haContext, "update.living_room_floor_2");
    ///<summary>Living Room Floor 3</summary>
    public UpdateEntity LivingRoomFloor3 => new(_haContext, "update.living_room_floor_3");
    ///<summary>Living Room Table 1</summary>
    public UpdateEntity LivingRoomTable1 => new(_haContext, "update.living_room_table_1");
    ///<summary>Living Room Table 2</summary>
    public UpdateEntity LivingRoomTable2 => new(_haContext, "update.living_room_table_2");
    ///<summary>Living Room Table 3</summary>
    public UpdateEntity LivingRoomTable3 => new(_haContext, "update.living_room_table_3");
    ///<summary>Pi-Hole Core Update Available</summary>
    public UpdateEntity PiHoleCoreUpdateAvailable => new(_haContext, "update.pi_hole_core_update_available");
    ///<summary>Pi-Hole FTL Update Available</summary>
    public UpdateEntity PiHoleFtlUpdateAvailable => new(_haContext, "update.pi_hole_ftl_update_available");
    ///<summary>Pi-Hole Web Update Available</summary>
    public UpdateEntity PiHoleWebUpdateAvailable => new(_haContext, "update.pi_hole_web_update_available");
    ///<summary>Repeater 1</summary>
    public UpdateEntity Repeater1 => new(_haContext, "update.repeater_1");
    ///<summary>Repeater 2</summary>
    public UpdateEntity Repeater2 => new(_haContext, "update.repeater_2");
    ///<summary>Repeater 3</summary>
    public UpdateEntity Repeater3 => new(_haContext, "update.repeater_3");
    ///<summary>Repeater 4</summary>
    public UpdateEntity Repeater4 => new(_haContext, "update.repeater_4");
    ///<summary>Repeater 5</summary>
    public UpdateEntity Repeater5 => new(_haContext, "update.repeater_5");
    ///<summary>Repeater 6</summary>
    public UpdateEntity Repeater6 => new(_haContext, "update.repeater_6");
    ///<summary>Stair 1</summary>
    public UpdateEntity Stair1 => new(_haContext, "update.stair_1");
    ///<summary>Stair 2</summary>
    public UpdateEntity Stair2 => new(_haContext, "update.stair_2");
    ///<summary>Studio Down</summary>
    public UpdateEntity StudioDown => new(_haContext, "update.studio_down");
    ///<summary>Studio Up</summary>
    public UpdateEntity StudioUp => new(_haContext, "update.studio_up");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Forecast Home</summary>
    public WeatherEntity ForecastHome => new(_haContext, "weather.forecast_home");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
    ///<summary>Work</summary>
    public ZoneEntity Work => new(_haContext, "zone.work");
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(Entity entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("battery_low")]
    public object? BatteryLow { get; init; }

    [JsonPropertyName("device_temperature")]
    public double? DeviceTemperature { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_outage_count")]
    public double? PowerOutageCount { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("water_leak")]
    public object? WaterLeak { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("vehicle_id")]
    public string? VehicleId { get; init; }

    [JsonPropertyName("vin")]
    public string? Vin { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("state")]
    public string? State { get; init; }

    [JsonPropertyName("charging_state")]
    public string? ChargingState { get; init; }

    [JsonPropertyName("conn_charge_cable")]
    public string? ConnChargeCable { get; init; }

    [JsonPropertyName("fast_charger_present")]
    public bool? FastChargerPresent { get; init; }

    [JsonPropertyName("fast_charger_brand")]
    public string? FastChargerBrand { get; init; }

    [JsonPropertyName("fast_charger_type")]
    public string? FastChargerType { get; init; }

    [JsonPropertyName("Driver Front")]
    public string? DriverFront { get; init; }

    [JsonPropertyName("Driver Rear")]
    public string? DriverRear { get; init; }

    [JsonPropertyName("Passenger Front")]
    public string? PassengerFront { get; init; }

    [JsonPropertyName("Passenger Rear")]
    public string? PassengerRear { get; init; }

    [JsonPropertyName("Scheduled charging time")]
    public double? Scheduledchargingtime { get; init; }

    [JsonPropertyName("Scheduled charging timestamp")]
    public object? Scheduledchargingtimestamp { get; init; }

    [JsonPropertyName("Departure time")]
    public double? Departuretime { get; init; }

    [JsonPropertyName("Preconditioning enabled")]
    public bool? Preconditioningenabled { get; init; }

    [JsonPropertyName("Preconditioning weekdays only")]
    public bool? Preconditioningweekdaysonly { get; init; }

    [JsonPropertyName("Off peak charging enabled")]
    public bool? Offpeakchargingenabled { get; init; }

    [JsonPropertyName("Off peak charging weekdays only")]
    public bool? Offpeakchargingweekdaysonly { get; init; }

    [JsonPropertyName("End off peak time")]
    public double? Endoffpeaktime { get; init; }

    [JsonPropertyName("Departure timestamp")]
    public double? Departuretimestamp { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("battery_level")]
    public double? BatteryLevel { get; init; }

    [JsonPropertyName("heartbeat")]
    public double? Heartbeat { get; init; }

    [JsonPropertyName("child_id")]
    public double? ChildId { get; init; }

    [JsonPropertyName("description")]
    public string? Description { get; init; }

    [JsonPropertyName("node_id")]
    public double? NodeId { get; init; }

    [JsonPropertyName("V_TRIPPED")]
    public string? VTRIPPED { get; init; }

    [JsonPropertyName("device")]
    public string? Device { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ClimateEntity : Entity<ClimateEntity, EntityState<ClimateAttributes>, ClimateAttributes>
{
    public ClimateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ClimateEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ClimateAttributes
{
    [JsonPropertyName("hvac_modes")]
    public IReadOnlyList<string>? HvacModes { get; init; }

    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("preset_modes")]
    public IReadOnlyList<string>? PresetModes { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CoverEntity : Entity<CoverEntity, EntityState<CoverAttributes>, CoverAttributes>
{
    public CoverEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CoverEntity(Entity entity) : base(entity)
    {
    }
}

public partial record CoverAttributes
{
    [JsonPropertyName("current_position")]
    public double? CurrentPosition { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(Entity entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("heading")]
    public double? Heading { get; init; }

    [JsonPropertyName("speed")]
    public object? Speed { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }
}

public partial record FanEntity : Entity<FanEntity, EntityState<FanAttributes>, FanAttributes>
{
    public FanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public FanEntity(Entity entity) : base(entity)
    {
    }
}

public partial record FanAttributes
{
    [JsonPropertyName("preset_modes")]
    public object? PresetModes { get; init; }

    [JsonPropertyName("percentage")]
    public double? Percentage { get; init; }

    [JsonPropertyName("percentage_step")]
    public double? PercentageStep { get; init; }

    [JsonPropertyName("preset_mode")]
    public object? PresetMode { get; init; }

    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    [JsonPropertyName("zone_id")]
    public string? ZoneId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(Entity entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(Entity entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }

    [JsonPropertyName("zone_id")]
    public string? ZoneId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("hs_color")]
    public IReadOnlyList<double>? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("effect")]
    public string? Effect { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public object? PowerOnBehavior { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }
}

public partial record LockEntity : Entity<LockEntity, EntityState<LockAttributes>, LockAttributes>
{
    public LockEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LockEntity(Entity entity) : base(entity)
    {
    }
}

public partial record LockAttributes
{
    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(Entity entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(Entity entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(Entity entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SceneEntity : Entity<SceneEntity, EntityState<SceneAttributes>, SceneAttributes>
{
    public SceneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SceneEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SceneAttributes
{
    [JsonPropertyName("entity_id")]
    public IReadOnlyList<object>? EntityId { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public object? PowerOnBehavior { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("battery_low")]
    public object? BatteryLow { get; init; }

    [JsonPropertyName("device_temperature")]
    public double? DeviceTemperature { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_outage_count")]
    public double? PowerOutageCount { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("water_leak")]
    public object? WaterLeak { get; init; }

    [JsonPropertyName("minutes_to_full_charge")]
    public double? MinutesToFullCharge { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("Energy at arrival")]
    public object? Energyatarrival { get; init; }

    [JsonPropertyName("Minutes traffic delay")]
    public object? Minutestrafficdelay { get; init; }

    [JsonPropertyName("Destination")]
    public object? Destination { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(Entity entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("voltage")]
    public double? Voltage { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("battery_low")]
    public object? BatteryLow { get; init; }

    [JsonPropertyName("device_temperature")]
    public double? DeviceTemperature { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_outage_count")]
    public double? PowerOutageCount { get; init; }

    [JsonPropertyName("water_leak")]
    public object? WaterLeak { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("colortemp")]
    public double? Colortemp { get; init; }

    [JsonPropertyName("rgb_color")]
    public IReadOnlyList<double>? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public IReadOnlyList<double>? XyColor { get; init; }

    [JsonPropertyName("time_left")]
    public double? TimeLeft { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("added_range")]
    public double? AddedRange { get; init; }

    [JsonPropertyName("charger_amps_request")]
    public double? ChargerAmpsRequest { get; init; }

    [JsonPropertyName("charger_amps_actual")]
    public double? ChargerAmpsActual { get; init; }

    [JsonPropertyName("charger_volts")]
    public double? ChargerVolts { get; init; }

    [JsonPropertyName("charger_phases")]
    public double? ChargerPhases { get; init; }

    [JsonPropertyName("est_battery_range_miles")]
    public double? EstBatteryRangeMiles { get; init; }

    [JsonPropertyName("est_battery_range_km")]
    public double? EstBatteryRangeKm { get; init; }

    [JsonPropertyName("tpms_last_seen_pressure_timestamp")]
    public double? TpmsLastSeenPressureTimestamp { get; init; }

    [JsonPropertyName("raw_soc")]
    public double? RawSoc { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(Entity entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("assumed_state")]
    public bool? AssumedState { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(Entity entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public object? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("color_temp")]
    public double? ColorTemp { get; init; }

    [JsonPropertyName("linkquality")]
    public double? Linkquality { get; init; }

    [JsonPropertyName("power_on_behavior")]
    public object? PowerOnBehavior { get; init; }

    [JsonPropertyName("update")]
    public object? Update { get; init; }

    [JsonPropertyName("update_available")]
    public bool? UpdateAvailable { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("battery")]
    public double? Battery { get; init; }

    [JsonPropertyName("position")]
    public double? Position { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(Entity entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public double? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(Entity entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<object>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AutomationServices Automation { get; }

    BackupServices Backup { get; }

    ButtonServices Button { get; }

    CameraServices Camera { get; }

    CastServices Cast { get; }

    CircadianLightingServices CircadianLighting { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    FanServices Fan { get; }

    FrontendServices Frontend { get; }

    GroupServices Group { get; }

    HomeassistantServices Homeassistant { get; }

    HumidifierServices Humidifier { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    LightServices Light { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    MysensorsServices Mysensors { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    PiHoleServices PiHole { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    SirenServices Siren { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TeslaCustomServices TeslaCustom { get; }

    TextServices Text { get; }

    TimerServices Timer { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    VacuumServices Vacuum { get; }

    WakeOnLanServices WakeOnLan { get; }

    ZoneServices Zone { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public BackupServices Backup => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public CastServices Cast => new(_haContext);
    public CircadianLightingServices CircadianLighting => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public LightServices Light => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public MysensorsServices Mysensors => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public PiHoleServices PiHole => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TeslaCustomServices TeslaCustom => new(_haContext);
    public TextServices Text => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public WakeOnLanServices WakeOnLan => new(_haContext);
    public ZoneServices Zone => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Send the alarm the command for arm away.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Send the alarm the command for arm away.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm away the alarm control panel with. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters{Code = code});
    }

    ///<summary>Send arm custom bypass command.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Send arm custom bypass command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm custom bypass the alarm control panel with. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters{Code = code});
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Send the alarm the command for arm home.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm home the alarm control panel with. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters{Code = code});
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Send the alarm the command for arm night.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm night the alarm control panel with. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters{Code = code});
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Send the alarm the command for arm vacation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to arm vacation the alarm control panel with. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters{Code = code});
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Send the alarm the command for disarm.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to disarm the alarm control panel with. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters{Code = code});
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Send the alarm the command for trigger.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to trigger the alarm control panel with. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters{Code = code});
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>An optional code to arm away the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>An optional code to arm custom bypass the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>An optional code to arm home the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>An optional code to arm night the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>An optional code to arm vacation the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>An optional code to disarm the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>An optional code to trigger the alarm control panel with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the automation configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("automation", "reload", null);
    }

    ///<summary>Toggle (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("automation", "toggle", target);
    }

    ///<summary>Trigger the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Trigger the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="skipCondition">Whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters{SkipCondition = skipCondition});
    }

    ///<summary>Disable an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disable an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="stopActions">Stop currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters{StopActions = stopActions});
    }

    ///<summary>Enable an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("automation", "turn_on", target);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stop currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class BackupServices
{
    private readonly IHaContext _haContext;
    public BackupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create a new backup.</summary>
    public void Create()
    {
        _haContext.CallService("backup", "create", null);
    }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("button", "press", target);
    }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disable the motion detection in a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "disable_motion_detection", target);
    }

    ///<summary>Enable the motion detection in a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "enable_motion_detection", target);
    }

    ///<summary>Play camera stream on supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Play camera stream on supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayer">Name(s) of media player to stream to.</param>
    ///<param name="format">Stream format supported by media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters{MediaPlayer = mediaPlayer, Format = format});
    }

    ///<summary>Record live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Record live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Target recording length.</param>
    ///<param name="lookback">Target lookback period to include in addition to duration. Only available if there is currently an active HLS stream.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters{Filename = filename, Duration = duration, Lookback = lookback});
    }

    ///<summary>Take a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Take a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a Filename. Variable is entity_id. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters{Filename = filename});
    }

    ///<summary>Turn off camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_off", target);
    }

    ///<summary>Turn on camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_on", target);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Name(s) of media player to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Template of a Filename. Variable is entity_id. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Target recording length.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Target lookback period to include in addition to duration. Only available if there is currently an active HLS stream.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Template of a Filename. Variable is entity_id. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class CastServices
{
    private readonly IHaContext _haContext;
    public CastServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Show a Lovelace view on a Chromecast.</summary>
    public void ShowLovelaceView(CastShowLovelaceViewParameters data)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, data);
    }

    ///<summary>Show a Lovelace view on a Chromecast.</summary>
    ///<param name="entityId">Media Player entity to show the Lovelace view on.</param>
    ///<param name="dashboardPath">The URL path of the Lovelace dashboard to show. eg: lovelace-cast</param>
    ///<param name="viewPath">The path of the Lovelace view to show. eg: downstairs</param>
    public void ShowLovelaceView(string entityId, string dashboardPath, string? viewPath = null)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, new CastShowLovelaceViewParameters{EntityId = entityId, DashboardPath = dashboardPath, ViewPath = viewPath});
    }
}

public partial record CastShowLovelaceViewParameters
{
    ///<summary>Media Player entity to show the Lovelace view on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The URL path of the Lovelace dashboard to show. eg: lovelace-cast</summary>
    [JsonPropertyName("dashboard_path")]
    public string? DashboardPath { get; init; }

    ///<summary>The path of the Lovelace view to show. eg: downstairs</summary>
    [JsonPropertyName("view_path")]
    public string? ViewPath { get; init; }
}

public partial class CircadianLightingServices
{
    private readonly IHaContext _haContext;
    public CircadianLightingServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Updates values for Circadian Lighting.</summary>
    public void ValuesUpdate()
    {
        _haContext.CallService("circadian_lighting", "values_update", null);
    }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters{AuxHeat = auxHeat});
    }

    ///<summary>Set fan operation for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Set fan operation for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanMode">New value of fan mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters{FanMode = fanMode});
    }

    ///<summary>Set target humidity of climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Set target humidity of climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">New target humidity for climate device.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters{Humidity = humidity});
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hvacMode">New value of operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters{HvacMode = hvacMode});
    }

    ///<summary>Set preset mode for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Set preset mode for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">New value of preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters{PresetMode = presetMode});
    }

    ///<summary>Set swing operation for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Set swing operation for climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingMode">New value of swing mode. eg: horizontal</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters{SwingMode = swingMode});
    }

    ///<summary>Set target temperature of climate device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Set target temperature of climate device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">New target temperature for HVAC.</param>
    ///<param name="targetTempHigh">New target high temperature for HVAC.</param>
    ///<param name="targetTempLow">New target low temperature for HVAC.</param>
    ///<param name="hvacMode">HVAC operation mode to set temperature to.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters{Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode});
    }

    ///<summary>Turn climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_off", target);
    }

    ///<summary>Turn climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_on", target);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>New value of fan mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>New target humidity for climate device.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>New value of operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>New value of preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>New value of swing mode. eg: horizontal</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>New target temperature for HVAC.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New target high temperature for HVAC.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>New target low temperature for HVAC.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode to set temperature to.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Make instance UI available outside over NabuCasa cloud</summary>
    public void RemoteConnect()
    {
        _haContext.CallService("cloud", "remote_connect", null);
    }

    ///<summary>Disconnect UI from NabuCasa cloud</summary>
    public void RemoteDisconnect()
    {
        _haContext.CallService("cloud", "remote_disconnect", null);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launch a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launch a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text eg: Turn all lights on</param>
    public void Process(string? text = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters{Text = text});
    }

    public void Reload()
    {
        _haContext.CallService("conversation", "reload", null);
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Change counter parameters.</summary>
    ///<param name="target">The target for this service call</param>
    public void Configure(ServiceTarget target, CounterConfigureParameters data)
    {
        _haContext.CallService("counter", "configure", target, data);
    }

    ///<summary>Change counter parameters.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="minimum">New minimum value for the counter or None to remove minimum.</param>
    ///<param name="maximum">New maximum value for the counter or None to remove maximum.</param>
    ///<param name="step">New value for step.</param>
    ///<param name="initial">New value for initial.</param>
    ///<param name="value">New state value.</param>
    public void Configure(ServiceTarget target, long? minimum = null, long? maximum = null, long? step = null, long? initial = null, long? value = null)
    {
        _haContext.CallService("counter", "configure", target, new CounterConfigureParameters{Minimum = minimum, Maximum = maximum, Step = step, Initial = initial, Value = value});
    }

    ///<summary>Decrement a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("counter", "decrement", target);
    }

    ///<summary>Increment a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("counter", "increment", target);
    }

    ///<summary>Reset a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("counter", "reset", target);
    }
}

public partial record CounterConfigureParameters
{
    ///<summary>New minimum value for the counter or None to remove minimum.</summary>
    [JsonPropertyName("minimum")]
    public long? Minimum { get; init; }

    ///<summary>New maximum value for the counter or None to remove maximum.</summary>
    [JsonPropertyName("maximum")]
    public long? Maximum { get; init; }

    ///<summary>New value for step.</summary>
    [JsonPropertyName("step")]
    public long? Step { get; init; }

    ///<summary>New value for initial.</summary>
    [JsonPropertyName("initial")]
    public long? Initial { get; init; }

    ///<summary>New state value.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Close all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover", target);
    }

    ///<summary>Close all or specified cover tilt.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover_tilt", target);
    }

    ///<summary>Open all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover", target);
    }

    ///<summary>Open all or specified cover tilt.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover_tilt", target);
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Position of the cover</param>
    public void SetCoverPosition(ServiceTarget target, long position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters{Position = position});
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tiltPosition">Tilt position of the cover.</param>
    public void SetCoverTiltPosition(ServiceTarget target, long tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters{TiltPosition = tiltPosition});
    }

    ///<summary>Stop all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover", target);
    }

    ///<summary>Stop all or specified cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target);
    }

    ///<summary>Toggle a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle", target);
    }

    ///<summary>Toggle a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Position of the cover</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Tilt position of the cover.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Control tracked device.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Control tracked device.</summary>
    ///<param name="mac">MAC address of device eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">Id of device (find id in known_devices.yaml). eg: phonedave</param>
    ///<param name="hostName">Hostname of device eg: Dave</param>
    ///<param name="locationName">Name of location where device is located (not_home is away). eg: home</param>
    ///<param name="gps">GPS coordinates where device is located (latitude, longitude). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of GPS coordinates.</param>
    ///<param name="battery">Battery level of device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters{Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery});
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of device eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>Id of device (find id in known_devices.yaml). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of device eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of location where device is located (not_home is away). eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where device is located (latitude, longitude). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrease the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decrease the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Decrease speed by a percentage.</param>
    public void DecreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters{PercentageStep = percentageStep});
    }

    ///<summary>Increase the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increase the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Increase speed by a percentage.</param>
    public void IncreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters{PercentageStep = percentageStep});
    }

    ///<summary>Oscillate the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Oscillate the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="oscillating">Flag to turn on/off oscillation.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters{Oscillating = oscillating});
    }

    ///<summary>Set the fan rotation.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Set the fan rotation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="direction">The direction to rotate.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters{Direction = direction});
    }

    ///<summary>Set fan speed percentage.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Set fan speed percentage.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Percentage speed setting.</param>
    public void SetPercentage(ServiceTarget target, long percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters{Percentage = percentage});
    }

    ///<summary>Set preset mode for a fan device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Set preset mode for a fan device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">New value of preset mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters{PresetMode = presetMode});
    }

    ///<summary>Toggle the fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("fan", "toggle", target);
    }

    ///<summary>Turn fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("fan", "turn_off", target);
    }

    ///<summary>Turn fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turn fan on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="speed">Speed setting. eg: high</param>
    ///<param name="percentage">Percentage speed setting.</param>
    ///<param name="presetMode">Preset mode setting. eg: auto</param>
    public void TurnOn(ServiceTarget target, string? speed = null, long? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters{Speed = speed, Percentage = percentage, PresetMode = presetMode});
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Decrease speed by a percentage.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Increase speed by a percentage.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Flag to turn on/off oscillation.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>The direction to rotate.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Percentage speed setting.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>New value of preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed setting. eg: high</summary>
    [JsonPropertyName("speed")]
    public string? Speed { get; init; }

    ///<summary>Percentage speed setting.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }

    ///<summary>Preset mode setting. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload themes from YAML configuration.</summary>
    public void ReloadThemes()
    {
        _haContext.CallService("frontend", "reload_themes", null);
    }

    ///<summary>Set a theme unless the client selected per-device theme.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Set a theme unless the client selected per-device theme.</summary>
    ///<param name="name">Name of a predefined theme eg: default</param>
    ///<param name="mode">The mode the theme is for.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters{Name = name, Mode = mode});
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a predefined theme eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>The mode the theme is for.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload group configuration, entities, and notify services.</summary>
    public void Reload()
    {
        _haContext.CallService("group", "reload", null);
    }

    ///<summary>Remove a user group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Remove a user group.</summary>
    ///<param name="objectId">Group id and part of entity id. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters{ObjectId = objectId});
    }

    ///<summary>Create/Update a user group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Create/Update a user group.</summary>
    ///<param name="objectId">Group id and part of entity id. eg: test_group</param>
    ///<param name="name">Name of group eg: My test group</param>
    ///<param name="icon">Name of icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Not compatible with 'delta'. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members that will change on group listening. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members that will be removed from group listening. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only turn on when all entities are on.</param>
    public void Set(string objectId, string? name = null, object? icon = null, object? entities = null, object? addEntities = null, object? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters{ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all});
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Group id and part of entity id. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Group id and part of entity id. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of group eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Not compatible with 'delta'. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of members that will change on group listening. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public object? AddEntities { get; init; }

    ///<summary>List of members that will be removed from group listening. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public object? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only turn on when all entities are on.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Check the Home Assistant configuration files for errors. Errors will be displayed in the Home Assistant log.</summary>
    public void CheckConfig()
    {
        _haContext.CallService("homeassistant", "check_config", null);
    }

    ///<summary>Reload a config entry that matches a target.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reload a config entry that matches a target.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="entryId">A configuration entry id eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters{EntryId = entryId});
    }

    ///<summary>Reload the core configuration.</summary>
    public void ReloadCoreConfig()
    {
        _haContext.CallService("homeassistant", "reload_core_config", null);
    }

    ///<summary>Restart the Home Assistant service.</summary>
    public void Restart()
    {
        _haContext.CallService("homeassistant", "restart", null);
    }

    ///<summary>Save the persistent states (for entities derived from RestoreEntity) immediately. Maintain the normal periodic saving interval.</summary>
    public void SavePersistentStates()
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null);
    }

    ///<summary>Update the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Update the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    public void SetLocation(string latitude, string longitude)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters{Latitude = latitude, Longitude = longitude});
    }

    ///<summary>Stop the Home Assistant service.</summary>
    public void Stop()
    {
        _haContext.CallService("homeassistant", "stop", null);
    }

    ///<summary>Generic service to toggle devices on/off under any domain</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "toggle", target);
    }

    ///<summary>Generic service to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_off", target);
    }

    ///<summary>Generic service to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_on", target);
    }

    ///<summary>Force one or more entities to update its data</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateEntity(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "update_entity", target);
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>A configuration entry id eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public string? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public string? Longitude { get; init; }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set target humidity of humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Set target humidity of humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">New target humidity for humidifier device.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters{Humidity = humidity});
    }

    ///<summary>Set mode for humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Set mode for humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mode">New mode eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters{Mode = mode});
    }

    ///<summary>Toggles a humidifier device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "toggle", target);
    }

    ///<summary>Turn humidifier device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_off", target);
    }

    ///<summary>Turn humidifier device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_on", target);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>New target humidity for humidifier device.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>New mode eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the input_boolean configuration</summary>
    public void Reload()
    {
        _haContext.CallService("input_boolean", "reload", null);
    }

    ///<summary>Toggle an input boolean</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "toggle", target);
    }

    ///<summary>Turn off an input boolean</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_off", target);
    }

    ///<summary>Turn on an input boolean</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_on", target);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the input button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("input_button", "press", target);
    }

    public void Reload()
    {
        _haContext.CallService("input_button", "reload", null);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the input_datetime configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_datetime", "reload", null);
    }

    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>This can be used to dynamically set the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="date">The target date the entity should be set to. eg: "2019-04-20"</param>
    ///<param name="time">The target time the entity should be set to. eg: "05:04:20"</param>
    ///<param name="datetime">The target date & time the entity should be set to. eg: "2019-04-20 05:04:20"</param>
    ///<param name="timestamp">The target date & time the entity should be set to as expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters{Date = date, Time = time, Datetime = datetime, Timestamp = timestamp});
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date the entity should be set to. eg: "2019-04-20"</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time the entity should be set to. eg: "05:04:20"</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>The target date & time the entity should be set to. eg: "2019-04-20 05:04:20"</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date & time the entity should be set to as expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrement the value of an input number entity by its stepping.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("input_number", "decrement", target);
    }

    ///<summary>Increment the value of an input number entity by its stepping.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("input_number", "increment", target);
    }

    ///<summary>Reload the input_number configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_number", "reload", null);
    }

    ///<summary>Set the value of an input number entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Set the value of an input number entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters{Value = value});
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the input_select configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_select", "reload", null);
    }

    ///<summary>Select the first option of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_first", target);
    }

    ///<summary>Select the last option of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_last", target);
    }

    ///<summary>Select the next options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters{Cycle = cycle});
    }

    ///<summary>Select an option of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Select an option of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: "Item A"</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters{Option = option});
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Select the previous options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters{Cycle = cycle});
    }

    ///<summary>Set the options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Set the options of an input select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">Options for the input select entity. eg: ["Item A", "Item B", "Item C"]</param>
    public void SetOptions(ServiceTarget target, object options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters{Options = options});
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: "Item A"</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>Options for the input select entity. eg: ["Item A", "Item B", "Item C"]</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the input_text configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_text", "reload", null);
    }

    ///<summary>Set the value of an input text entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Set the value of an input text entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value the entity should be set to. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters{Value = value});
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value the entity should be set to. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">Color for the light in RGB-format. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public void Toggle(ServiceTarget target, float? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters{Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, Profile = profile, Flash = flash, Effect = effect});
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">If the light should flash.</param>
    public void TurnOff(ServiceTarget target, float? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters{Transition = transition, Flash = flash});
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color for the light (based on RGB - red, green, blue).</param>
    ///<param name="rgbwColor">A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode and change its brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public void TurnOn(ServiceTarget target, float? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, long? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters{Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect});
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public float? Transition { get; init; }

    ///<summary>Color for the light in RGB-format. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>A human readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color for the light in XY-format. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature for the light in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature for the light in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>If the light should flash.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public float? Transition { get; init; }

    ///<summary>If the light should flash.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public float? Transition { get; init; }

    ///<summary>The color for the light (based on RGB - red, green, blue).</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light. eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary>A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light. eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    ///<summary>A human readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color for the light in XY-format. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature for the light in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature for the light in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by an amount.</summary>
    [JsonPropertyName("brightness_step")]
    public long? BrightnessStep { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Set the light to white mode and change its brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</summary>
    [JsonPropertyName("white")]
    public long? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>If the light should flash.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Lock all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Lock all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to lock the lock with. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters{Code = code});
    }

    ///<summary>Open all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Open all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to open the lock with. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters{Code = code});
    }

    ///<summary>Unlock all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlock all or specified locks.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">An optional code to unlock the lock with. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters{Code = code});
    }
}

public partial record LockLockParameters
{
    ///<summary>An optional code to lock the lock with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>An optional code to open the lock with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>An optional code to unlock the lock with. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create a custom entry in your logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Create a custom entry in your logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced with entity_id. eg: Kitchen</param>
    ///<param name="message">Message of the custom logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in custom logbook entry.</param>
    ///<param name="domain">Icon of domain to display in custom logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters{Name = name, Message = message, EntityId = entityId, Domain = domain});
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced with entity_id. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the custom logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in custom logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Icon of domain to display in custom logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Set the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters{Level = level});
    }

    ///<summary>Set log level for integrations.</summary>
    public void SetLevel()
    {
        _haContext.CallService("logger", "set_level", null);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Send the media player the command to clear players playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target)
    {
        _haContext.CallService("media_player", "clear_playlist", target);
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="groupMembers">The players which will be synced with the target player. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, string groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters{GroupMembers = groupMembers});
    }

    ///<summary>Send the media player the command for next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_next_track", target);
    }

    ///<summary>Send the media player the command for pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_pause", target);
    }

    ///<summary>Send the media player the command for play.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play", target);
    }

    ///<summary>Toggle media player play/pause state.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play_pause", target);
    }

    ///<summary>Send the media player the command for previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_previous_track", target);
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="seekPosition">Position to seek to. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters{SeekPosition = seekPosition});
    }

    ///<summary>Send the media player the stop command.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_stop", target);
    }

    ///<summary>Send the media player the command for playing media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Send the media player the command for playing media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters{MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce});
    }

    ///<summary>Set repeat mode</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Set repeat mode</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters{Repeat = repeat});
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters{SoundMode = soundMode});
    }

    ///<summary>Send the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Send the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters{Source = source});
    }

    ///<summary>Set shuffling state.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Set shuffling state.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="shuffle">True/false for enabling/disabling shuffle.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters{Shuffle = shuffle});
    }

    ///<summary>Toggles a media player power state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("media_player", "toggle", target);
    }

    ///<summary>Turn a media player power off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_off", target);
    }

    ///<summary>Turn a media player power on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_on", target);
    }

    ///<summary>Unjoin the player from a group. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target)
    {
        _haContext.CallService("media_player", "unjoin", target);
    }

    ///<summary>Turn a media player volume down.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_down", target);
    }

    ///<summary>Mute a media player's volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mute a media player's volume.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="isVolumeMuted">True/false for mute/unmute.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters{IsVolumeMuted = isVolumeMuted});
    }

    ///<summary>Set a media player's volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Set a media player's volume level.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="volumeLevel">Volume level to set as float.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters{VolumeLevel = volumeLevel});
    }

    ///<summary>Turn a media player volume up.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_up", target);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the target player. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public string? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Position to seek to. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>True/false for enabling/disabling shuffle.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>True/false for mute/unmute.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>Volume level to set as float.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Dump messages on a topic selector to the 'mqtt_dump.txt' file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Dump messages on a topic selector to the 'mqtt_dump.txt' file in your configuration folder.</summary>
    ///<param name="topic">topic to listen to eg: OpenZWave/#</param>
    ///<param name="duration">how long we should listen for messages in seconds</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters{Topic = topic, Duration = duration});
    }

    ///<summary>Publish a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publish a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish payload. eg: /homeassistant/hello</param>
    ///<param name="payload">Payload to publish. eg: This is great</param>
    ///<param name="payloadTemplate">Template to render as payload value. Ignored if payload given. eg: {{ states('sensor.temperature') }}</param>
    ///<param name="qos">Quality of Service to use.</param>
    ///<param name="retain">If message should have the retain flag set.</param>
    public void Publish(string topic, string? payload = null, object? payloadTemplate = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters{Topic = topic, Payload = payload, PayloadTemplate = payloadTemplate, Qos = qos, Retain = retain});
    }

    ///<summary>Reload all MQTT entities from YAML.</summary>
    public void Reload()
    {
        _haContext.CallService("mqtt", "reload", null);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>topic to listen to eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>how long we should listen for messages in seconds</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish payload. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>Payload to publish. eg: This is great</summary>
    [JsonPropertyName("payload")]
    public string? Payload { get; init; }

    ///<summary>Template to render as payload value. Ignored if payload given. eg: {{ states('sensor.temperature') }}</summary>
    [JsonPropertyName("payload_template")]
    public object? PayloadTemplate { get; init; }

    ///<summary>Quality of Service to use.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If message should have the retain flag set.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class MysensorsServices
{
    private readonly IHaContext _haContext;
    public MysensorsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set an IR code as a state attribute for a MySensors IR device switch and turn the switch on.</summary>
    public void SendIrCode(MysensorsSendIrCodeParameters data)
    {
        _haContext.CallService("mysensors", "send_ir_code", null, data);
    }

    ///<summary>Set an IR code as a state attribute for a MySensors IR device switch and turn the switch on.</summary>
    ///<param name="entityId">Name of entity that should have the IR code set and be turned on. Platform dependent.</param>
    ///<param name="vIRSEND">IR code to send. eg: 0xC284</param>
    public void SendIrCode(string vIRSEND, string? entityId = null)
    {
        _haContext.CallService("mysensors", "send_ir_code", null, new MysensorsSendIrCodeParameters{EntityId = entityId, VIRSEND = vIRSEND});
    }
}

public partial record MysensorsSendIrCodeParameters
{
    ///<summary>Name of entity that should have the IR code set and be turned on. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>IR code to send. eg: 0xC284</summary>
    [JsonPropertyName("V_IR_SEND")]
    public string? VIRSEND { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the mobile_app_pixel_6_pro integration.</summary>
    public void MobileAppPixel6Pro(NotifyMobileAppPixel6ProParameters data)
    {
        _haContext.CallService("notify", "mobile_app_pixel_6_pro", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_pixel_6_pro integration.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void MobileAppPixel6Pro(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_pixel_6_pro", null, new NotifyMobileAppPixel6ProParameters{Message = message, Title = title, Target = target, Data = data});
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    ///<param name="target">An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</param>
    ///<param name="data">Extended information for notification. Optional depending on the platform. eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters{Message = message, Title = title, Target = target, Data = data});
    }

    ///<summary>Sends a notification that is visible in the front-end.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the front-end.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title for your notification. eg: Your Garage Door Friend</param>
    public void PersistentNotification(string message, string? title = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters{Message = message, Title = title});
    }
}

public partial record NotifyMobileAppPixel6ProParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>An array of targets to send the notification to. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary>Extended information for notification. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title for your notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set the value of a Number entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Set the value of a Number entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value the entity should be set to. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters{Value = value});
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value the entity should be set to. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Show a notification in the frontend.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Show a notification in the frontend.</summary>
    ///<param name="message">Message body of the notification. [Templates accepted] eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title for your notification. [Templates accepted] eg: Test notification</param>
    ///<param name="notificationId">Target ID of the notification, will replace a notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters{Message = message, Title = title, NotificationId = notificationId});
    }

    ///<summary>Remove a notification from the frontend.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Remove a notification from the frontend.</summary>
    ///<param name="notificationId">Target ID of the notification, which should be removed. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters{NotificationId = notificationId});
    }

    ///<summary>Mark a notification read.</summary>
    public void MarkRead(PersistentNotificationMarkReadParameters data)
    {
        _haContext.CallService("persistent_notification", "mark_read", null, data);
    }

    ///<summary>Mark a notification read.</summary>
    ///<param name="notificationId">Target ID of the notification, which should be mark read. eg: 1234</param>
    public void MarkRead(string notificationId)
    {
        _haContext.CallService("persistent_notification", "mark_read", null, new PersistentNotificationMarkReadParameters{NotificationId = notificationId});
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. [Templates accepted] eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title for your notification. [Templates accepted] eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Target ID of the notification, will replace a notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>Target ID of the notification, which should be removed. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationMarkReadParameters
{
    ///<summary>Target ID of the notification, which should be mark read. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the person configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("person", "reload", null);
    }
}

public partial class PiHoleServices
{
    private readonly IHaContext _haContext;
    public PiHoleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disable configured Pi-hole(s) for an amount of time</summary>
    ///<param name="target">The target for this service call</param>
    public void Disable(ServiceTarget target, PiHoleDisableParameters data)
    {
        _haContext.CallService("pi_hole", "disable", target, data);
    }

    ///<summary>Disable configured Pi-hole(s) for an amount of time</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Time that the Pi-hole should be disabled for eg: 00:00:15</param>
    public void Disable(ServiceTarget target, string duration)
    {
        _haContext.CallService("pi_hole", "disable", target, new PiHoleDisableParameters{Duration = duration});
    }
}

public partial record PiHoleDisableParameters
{
    ///<summary>Time that the Pi-hole should be disabled for eg: 00:00:15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stop the recording of events and state changes</summary>
    public void Disable()
    {
        _haContext.CallService("recorder", "disable", null);
    }

    ///<summary>Start the recording of events and state changes</summary>
    public void Enable()
    {
        _haContext.CallService("recorder", "enable", null);
    }

    ///<summary>Start purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Start purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of history days to keep in database after purge.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Apply entity_id and event_type filter in addition to time based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters{KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter});
    }

    ///<summary>Start purge task to remove specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    public void PurgeEntities(ServiceTarget target, RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", target, data);
    }

    ///<summary>Start purge task to remove specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="domains">List the domains that need to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List the glob patterns to select entities for removal from the recorder database. eg: domain*.object_id*</param>
    public void PurgeEntities(ServiceTarget target, object? domains = null, object? entityGlobs = null)
    {
        _haContext.CallService("recorder", "purge_entities", target, new RecorderPurgeEntitiesParameters{Domains = domains, EntityGlobs = entityGlobs});
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of history days to keep in database after purge.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Apply entity_id and event_type filter in addition to time based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List the domains that need to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List the glob patterns to select entities for removal from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Name of the device from which commands will be deleted. eg: television</param>
    ///<param name="command">A single command or a list of commands to delete. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters{Device = device, Command = command});
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as alternative (useful for discrete remotes).</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters{Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout});
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the command(s).</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters{Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs});
    }

    ///<summary>Toggles a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("remote", "toggle", target);
    }

    ///<summary>Sends the Power Off Command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("remote", "turn_off", target);
    }

    ///<summary>Sends the Power On Command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the Power On Command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="activity">Activity ID or Activity Name to start. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters{Activity = activity});
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Name of the device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to delete. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as alternative (useful for discrete remotes).</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the command(s).</summary>
    [JsonPropertyName("num_repeats")]
    public long? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or Activity Name to start. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activate a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activate a scene with configuration.</summary>
    ///<param name="entities">The entities and the state that they need to be. eg: {"light.kitchen":"on","light.ceiling":{"state":"on","brightness":80}}</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    public void Apply(object entities, float? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters{Entities = entities, Transition = transition});
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity_id of the new scene. eg: all_lights</param>
    ///<param name="entities">The entities to control with the scene. eg: {"light.tv_back_light":"on","light.ceiling":{"state":"on","brightness":200}}</param>
    ///<param name="snapshotEntities">The entities of which a snapshot is to be taken eg: ["light.ceiling","light.kitchen"]</param>
    public void Create(string sceneId, object? entities = null, object? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters{SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities});
    }

    ///<summary>Reload the scene configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("scene", "reload", null);
    }

    ///<summary>Activate a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activate a scene.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    public void TurnOn(ServiceTarget target, float? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters{Transition = transition});
    }
}

public partial record SceneApplyParameters
{
    ///<summary>The entities and the state that they need to be. eg: {"light.kitchen":"on","light.ceiling":{"state":"on","brightness":80}}</summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Transition duration it takes to bring devices to the state defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public float? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity_id of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>The entities to control with the scene. eg: {"light.tv_back_light":"on","light.ceiling":{"state":"on","brightness":200}}</summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>The entities of which a snapshot is to be taken eg: ["light.ceiling","light.kitchen"]</summary>
    [JsonPropertyName("snapshot_entities")]
    public object? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Transition duration it takes to bring devices to the state defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public float? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the schedule configuration</summary>
    public void Reload()
    {
        _haContext.CallService("schedule", "reload", null);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload all the available scripts</summary>
    public void Reload()
    {
        _haContext.CallService("script", "reload", null);
    }

    ///<summary>Toggle script</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("script", "toggle", target);
    }

    ///<summary>Turn off script</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_off", target);
    }

    ///<summary>Turn on script</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_on", target);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Select an option of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Select an option of an select entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: "Item A"</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters{Option = option});
    }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: "Item A"</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a siren.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("siren", "toggle", target);
    }

    ///<summary>Turn siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("siren", "turn_off", target);
    }

    ///<summary>Turn siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turn siren on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tone">The tone to emit when turning the siren on. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume level of the noise to emit when turning the siren on. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">The duration in seconds of the noise to emit when turning the siren on. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters{Tone = tone, VolumeLevel = volumeLevel, Duration = duration});
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit when turning the siren on. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume level of the noise to emit when turning the siren on. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>The duration in seconds of the noise to emit when turning the siren on. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch state</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("switch", "toggle", target);
    }

    ///<summary>Turn a switch off</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_off", target);
    }

    ///<summary>Turn a switch on</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_on", target);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clear all log entries.</summary>
    public void Clear()
    {
        _haContext.CallService("system_log", "clear", null);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to 'system_log.external'. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters{Message = message, Level = level, Logger = logger});
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to 'system_log.external'. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TeslaCustomServices
{
    private readonly IHaContext _haContext;
    public TeslaCustomServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Run an API command using controller.api. https://teslajsonpy.readthedocs.io/en/latest/teslajsonpy/teslajsonpy.html#teslajsonpy.Controller.api</summary>
    public void Api(TeslaCustomApiParameters data)
    {
        _haContext.CallService("tesla_custom", "api", null, data);
    }

    ///<summary>Run an API command using controller.api. https://teslajsonpy.readthedocs.io/en/latest/teslajsonpy/teslajsonpy.html#teslajsonpy.Controller.api</summary>
    ///<param name="email">Email address (optional if only one account) eg: elon@tesla.com</param>
    ///<param name="command">Command to run. See https://github.com/zabuldon/teslajsonpy/blob/master/teslajsonpy/endpoints.json eg: WAKE_UP</param>
    ///<param name="parameters">Parameters in a dictionary. `path_vars` replace variables in endpoints.json path. All others are passed directly to controller.api. For command parameters see https://tesla-api.timdorr.com/vehicle/commands. eg: {"path_vars": {"vehicle_id":"1"}, "wake_if_asleep":True}</param>
    public void Api(string command, object parameters, string? email = null)
    {
        _haContext.CallService("tesla_custom", "api", null, new TeslaCustomApiParameters{Email = email, Command = command, Parameters = parameters});
    }

    ///<summary>Set polling interval for updating fresh data from an awake car</summary>
    public void PollingInterval(TeslaCustomPollingIntervalParameters data)
    {
        _haContext.CallService("tesla_custom", "polling_interval", null, data);
    }

    ///<summary>Set polling interval for updating fresh data from an awake car</summary>
    ///<param name="email">Email address (optional if only one account) eg: elon@tesla.com</param>
    ///<param name="vin">Vehicle VIN (if not provided then default polling interval will be updated) eg: 5YJSA11111111111</param>
    ///<param name="scanInterval">Number of seconds between each poll.  See https://github.com/alandtse/tesla/wiki/Polling-policy more information. eg: 660</param>
    public void PollingInterval(long scanInterval, string? email = null, string? vin = null)
    {
        _haContext.CallService("tesla_custom", "polling_interval", null, new TeslaCustomPollingIntervalParameters{Email = email, Vin = vin, ScanInterval = scanInterval});
    }
}

public partial record TeslaCustomApiParameters
{
    ///<summary>Email address (optional if only one account) eg: elon@tesla.com</summary>
    [JsonPropertyName("email")]
    public string? Email { get; init; }

    ///<summary>Command to run. See https://github.com/zabuldon/teslajsonpy/blob/master/teslajsonpy/endpoints.json eg: WAKE_UP</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters in a dictionary. `path_vars` replace variables in endpoints.json path. All others are passed directly to controller.api. For command parameters see https://tesla-api.timdorr.com/vehicle/commands. eg: {"path_vars": {"vehicle_id":"1"}, "wake_if_asleep":True}</summary>
    [JsonPropertyName("parameters")]
    public object? Parameters { get; init; }
}

public partial record TeslaCustomPollingIntervalParameters
{
    ///<summary>Email address (optional if only one account) eg: elon@tesla.com</summary>
    [JsonPropertyName("email")]
    public string? Email { get; init; }

    ///<summary>Vehicle VIN (if not provided then default polling interval will be updated) eg: 5YJSA11111111111</summary>
    [JsonPropertyName("vin")]
    public string? Vin { get; init; }

    ///<summary>Number of seconds between each poll.  See https://github.com/alandtse/tesla/wiki/Polling-policy more information. eg: 660</summary>
    [JsonPropertyName("scan_interval")]
    public long? ScanInterval { get; init; }
}

public partial class TextServices
{
    private readonly IHaContext _haContext;
    public TextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Set value of a text entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TextSetValueParameters data)
    {
        _haContext.CallService("text", "set_value", target, data);
    }

    ///<summary>Set value of a text entity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Value to set. eg: Hello world!</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("text", "set_value", target, new TextSetValueParameters{Value = value});
    }
}

public partial record TextSetValueParameters
{
    ///<summary>Value to set. eg: Hello world!</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancel a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target)
    {
        _haContext.CallService("timer", "cancel", target);
    }

    ///<summary>Finish a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target)
    {
        _haContext.CallService("timer", "finish", target);
    }

    ///<summary>Pause a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("timer", "pause", target);
    }

    public void Reload()
    {
        _haContext.CallService("timer", "reload", null);
    }

    ///<summary>Start a timer</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Start a timer</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration the timer requires to finish. [optional] eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters{Duration = duration});
    }
}

public partial record TimerStartParameters
{
    ///<summary>Duration the timer requires to finish. [optional] eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Remove all text-to-speech cache files and RAM cache.</summary>
    public void ClearCache()
    {
        _haContext.CallService("tts", "clear_cache", null);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId">Name(s) of media player entities.</param>
    ///<param name="message">Text to speak on devices. eg: My name is hanna</param>
    ///<param name="cache">Control file cache of this message.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters{EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options});
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    public void GoogleTranslateSay(TtsGoogleTranslateSayParameters data)
    {
        _haContext.CallService("tts", "google_translate_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with google_translate.</summary>
    ///<param name="entityId">Name(s) of media player entities.</param>
    ///<param name="message">Text to speak on devices. eg: My name is hanna</param>
    ///<param name="cache">Control file cache of this message.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</param>
    public void GoogleTranslateSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "google_translate_say", null, new TtsGoogleTranslateSayParameters{EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options});
    }
}

public partial record TtsCloudSayParameters
{
    ///<summary>Name(s) of media player entities.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Text to speak on devices. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Control file cache of this message.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsGoogleTranslateSayParameters
{
    ///<summary>Name(s) of media player entities.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Text to speak on devices. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Control file cache of this message.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing platform-specific options. Optional depending on the platform. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target)
    {
        _haContext.CallService("update", "clear_skipped", target);
    }

    ///<summary>Install an update for this device or service</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Install an update for this device or service</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="version">Version to install, if omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">Backup before installing the update, if supported by the integration.</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters{Version = version, Backup = backup});
    }

    ///<summary>Mark currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target)
    {
        _haContext.CallService("update", "skip", target);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>Version to install, if omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>Backup before installing the update, if supported by the integration.</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tell the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "clean_spot", target);
    }

    ///<summary>Locate the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "locate", target);
    }

    ///<summary>Pause the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "pause", target);
    }

    ///<summary>Tell the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "return_to_base", target);
    }

    ///<summary>Send a raw command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Send a raw command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">Command to execute. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. eg: { "key": "value" }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters{Command = command, Params = @params});
    }

    ///<summary>Set the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Set the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanSpeed">Platform dependent vacuum cleaner fan speed, with speed steps, like 'medium' or by percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters{FanSpeed = fanSpeed});
    }

    ///<summary>Start or resume the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start", target);
    }

    ///<summary>Start, pause, or resume the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartPause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start_pause", target);
    }

    ///<summary>Stop the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "stop", target);
    }

    public void Toggle()
    {
        _haContext.CallService("vacuum", "toggle", null);
    }

    ///<summary>Stop the current cleaning task and return to home.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_off", target);
    }

    ///<summary>Start a new cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_on", target);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. eg: { "key": "value" }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Platform dependent vacuum cleaner fan speed, with speed steps, like 'medium' or by percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class WakeOnLanServices
{
    private readonly IHaContext _haContext;
    public WakeOnLanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Send a 'magic packet' to wake up a device with 'Wake-On-LAN' capabilities.</summary>
    public void SendMagicPacket(WakeOnLanSendMagicPacketParameters data)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, data);
    }

    ///<summary>Send a 'magic packet' to wake up a device with 'Wake-On-LAN' capabilities.</summary>
    ///<param name="mac">MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</param>
    ///<param name="broadcastAddress">Broadcast IP where to send the magic packet. eg: 192.168.255.255</param>
    ///<param name="broadcastPort">Port where to send the magic packet.</param>
    public void SendMagicPacket(string mac, string? broadcastAddress = null, long? broadcastPort = null)
    {
        _haContext.CallService("wake_on_lan", "send_magic_packet", null, new WakeOnLanSendMagicPacketParameters{Mac = mac, BroadcastAddress = broadcastAddress, BroadcastPort = broadcastPort});
    }
}

public partial record WakeOnLanSendMagicPacketParameters
{
    ///<summary>MAC address of the device to wake up. eg: aa:bb:cc:dd:ee:ff</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>Broadcast IP where to send the magic packet. eg: 192.168.255.255</summary>
    [JsonPropertyName("broadcast_address")]
    public string? BroadcastAddress { get; init; }

    ///<summary>Port where to send the magic packet.</summary>
    [JsonPropertyName("broadcast_port")]
    public long? BroadcastPort { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reload the YAML-based zone configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("zone", "reload", null);
    }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggle (enable / disable) an automation.</summary>
    public static void Toggle(this AutomationEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<AutomationEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Trigger the actions of an automation.</summary>
    public static void Trigger(this AutomationEntity target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Trigger the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<AutomationEntity> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Trigger the actions of an automation.</summary>
    ///<param name="target">The AutomationEntity to call this service for</param>
    ///<param name="skipCondition">Whether or not the conditions will be skipped.</param>
    public static void Trigger(this AutomationEntity target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters{SkipCondition = skipCondition});
    }

    ///<summary>Trigger the actions of an automation.</summary>
    ///<param name="target">The IEnumerable<AutomationEntity> to call this service for</param>
    ///<param name="skipCondition">Whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<AutomationEntity> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters{SkipCondition = skipCondition});
    }

    ///<summary>Disable an automation.</summary>
    public static void TurnOff(this AutomationEntity target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disable an automation.</summary>
    public static void TurnOff(this IEnumerable<AutomationEntity> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disable an automation.</summary>
    ///<param name="target">The AutomationEntity to call this service for</param>
    ///<param name="stopActions">Stop currently running actions.</param>
    public static void TurnOff(this AutomationEntity target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters{StopActions = stopActions});
    }

    ///<summary>Disable an automation.</summary>
    ///<param name="target">The IEnumerable<AutomationEntity> to call this service for</param>
    ///<param name="stopActions">Stop currently running actions.</param>
    public static void TurnOff(this IEnumerable<AutomationEntity> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters{StopActions = stopActions});
    }

    ///<summary>Enable an automation.</summary>
    public static void TurnOn(this AutomationEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Enable an automation.</summary>
    public static void TurnOn(this IEnumerable<AutomationEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this ButtonEntity target)
    {
        target.CallService("press");
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<ButtonEntity> target)
    {
        target.CallService("press");
    }
}

public static class ClimateEntityExtensionMethods
{
    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    public static void SetAuxHeat(this ClimateEntity target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    public static void SetAuxHeat(this IEnumerable<ClimateEntity> target, ClimateSetAuxHeatParameters data)
    {
        target.CallService("set_aux_heat", data);
    }

    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this ClimateEntity target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters{AuxHeat = auxHeat});
    }

    ///<summary>Turn auxiliary heater on/off for climate device.</summary>
    ///<param name="target">The IEnumerable<ClimateEntity> to call this service for</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public static void SetAuxHeat(this IEnumerable<ClimateEntity> target, bool auxHeat)
    {
        target.CallService("set_aux_heat", new ClimateSetAuxHeatParameters{AuxHeat = auxHeat});
    }

    ///<summary>Set fan operation for climate device.</summary>
    public static void SetFanMode(this ClimateEntity target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Set fan operation for climate device.</summary>
    public static void SetFanMode(this IEnumerable<ClimateEntity> target, ClimateSetFanModeParameters data)
    {
        target.CallService("set_fan_mode", data);
    }

    ///<summary>Set fan operation for climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="fanMode">New value of fan mode. eg: low</param>
    public static void SetFanMode(this ClimateEntity target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters{FanMode = fanMode});
    }

    ///<summary>Set fan operation for climate device.</summary>
    ///<param name="target">The IEnumerable<ClimateEntity> to call this service for</param>
    ///<param name="fanMode">New value of fan mode. eg: low</param>
    public static void SetFanMode(this IEnumerable<ClimateEntity> target, string fanMode)
    {
        target.CallService("set_fan_mode", new ClimateSetFanModeParameters{FanMode = fanMode});
    }

    ///<summary>Set target humidity of climate device.</summary>
    public static void SetHumidity(this ClimateEntity target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Set target humidity of climate device.</summary>
    public static void SetHumidity(this IEnumerable<ClimateEntity> target, ClimateSetHumidityParameters data)
    {
        target.CallService("set_humidity", data);
    }

    ///<summary>Set target humidity of climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="humidity">New target humidity for climate device.</param>
    public static void SetHumidity(this ClimateEntity target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters{Humidity = humidity});
    }

    ///<summary>Set target humidity of climate device.</summary>
    ///<param name="target">The IEnumerable<ClimateEntity> to call this service for</param>
    ///<param name="humidity">New target humidity for climate device.</param>
    public static void SetHumidity(this IEnumerable<ClimateEntity> target, long humidity)
    {
        target.CallService("set_humidity", new ClimateSetHumidityParameters{Humidity = humidity});
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    public static void SetHvacMode(this ClimateEntity target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    public static void SetHvacMode(this IEnumerable<ClimateEntity> target, ClimateSetHvacModeParameters data)
    {
        target.CallService("set_hvac_mode", data);
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="hvacMode">New value of operation mode.</param>
    public static void SetHvacMode(this ClimateEntity target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters{HvacMode = hvacMode});
    }

    ///<summary>Set HVAC operation mode for climate device.</summary>
    ///<param name="target">The IEnumerable<ClimateEntity> to call this service for</param>
    ///<param name="hvacMode">New value of operation mode.</param>
    public static void SetHvacMode(this IEnumerable<ClimateEntity> target, object? hvacMode = null)
    {
        target.CallService("set_hvac_mode", new ClimateSetHvacModeParameters{HvacMode = hvacMode});
    }

    ///<summary>Set preset mode for climate device.</summary>
    public static void SetPresetMode(this ClimateEntity target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Set preset mode for climate device.</summary>
    public static void SetPresetMode(this IEnumerable<ClimateEntity> target, ClimateSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Set preset mode for climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="presetMode">New value of preset mode. eg: away</param>
    public static void SetPresetMode(this ClimateEntity target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters{PresetMode = presetMode});
    }

    ///<summary>Set preset mode for climate device.</summary>
    ///<param name="target">The IEnumerable<ClimateEntity> to call this service for</param>
    ///<param name="presetMode">New value of preset mode. eg: away</param>
    public static void SetPresetMode(this IEnumerable<ClimateEntity> target, string presetMode)
    {
        target.CallService("set_preset_mode", new ClimateSetPresetModeParameters{PresetMode = presetMode});
    }

    ///<summary>Set swing operation for climate device.</summary>
    public static void SetSwingMode(this ClimateEntity target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Set swing operation for climate device.</summary>
    public static void SetSwingMode(this IEnumerable<ClimateEntity> target, ClimateSetSwingModeParameters data)
    {
        target.CallService("set_swing_mode", data);
    }

    ///<summary>Set swing operation for climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="swingMode">New value of swing mode. eg: horizontal</param>
    public static void SetSwingMode(this ClimateEntity target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters{SwingMode = swingMode});
    }

    ///<summary>Set swing operation for climate device.</summary>
    ///<param name="target">The IEnumerable<ClimateEntity> to call this service for</param>
    ///<param name="swingMode">New value of swing mode. eg: horizontal</param>
    public static void SetSwingMode(this IEnumerable<ClimateEntity> target, string swingMode)
    {
        target.CallService("set_swing_mode", new ClimateSetSwingModeParameters{SwingMode = swingMode});
    }

    ///<summary>Set target temperature of climate device.</summary>
    public static void SetTemperature(this ClimateEntity target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Set target temperature of climate device.</summary>
    public static void SetTemperature(this IEnumerable<ClimateEntity> target, ClimateSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Set target temperature of climate device.</summary>
    ///<param name="target">The ClimateEntity to call this service for</param>
    ///<param name="temperature">New target temperature for HVAC.</param>
    ///<param name="targetTempHigh">New target high temperature for HVAC.</param>
    ///<param name="targetTempLow">New target low temperature for HVAC.</param>
    ///<param name="hvacMode">HVAC operation mode to set temperature to.</param>
    public static void SetTemperature(this ClimateEntity target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters{Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode});
    }

    ///<summary>Set target temperature of climate device.</summary>
    ///<param name="target">The IEnumerable<ClimateEntity> to call this service for</param>
    ///<param name="temperature">New target temperature for HVAC.</param>
    ///<param name="targetTempHigh">New target high temperature for HVAC.</param>
    ///<param name="targetTempLow">New target low temperature for HVAC.</param>
    ///<param name="hvacMode">HVAC operation mode to set temperature to.</param>
    public static void SetTemperature(this IEnumerable<ClimateEntity> target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        target.CallService("set_temperature", new ClimateSetTemperatureParameters{Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode});
    }

    ///<summary>Turn climate device off.</summary>
    public static void TurnOff(this ClimateEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn climate device off.</summary>
    public static void TurnOff(this IEnumerable<ClimateEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn climate device on.</summary>
    public static void TurnOn(this ClimateEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn climate device on.</summary>
    public static void TurnOn(this IEnumerable<ClimateEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class CoverEntityExtensionMethods
{
    ///<summary>Close all or specified cover.</summary>
    public static void CloseCover(this CoverEntity target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Close all or specified cover.</summary>
    public static void CloseCover(this IEnumerable<CoverEntity> target)
    {
        target.CallService("close_cover");
    }

    ///<summary>Close all or specified cover tilt.</summary>
    public static void CloseCoverTilt(this CoverEntity target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Close all or specified cover tilt.</summary>
    public static void CloseCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("close_cover_tilt");
    }

    ///<summary>Open all or specified cover.</summary>
    public static void OpenCover(this CoverEntity target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Open all or specified cover.</summary>
    public static void OpenCover(this IEnumerable<CoverEntity> target)
    {
        target.CallService("open_cover");
    }

    ///<summary>Open all or specified cover tilt.</summary>
    public static void OpenCoverTilt(this CoverEntity target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Open all or specified cover tilt.</summary>
    public static void OpenCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("open_cover_tilt");
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    public static void SetCoverPosition(this CoverEntity target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    public static void SetCoverPosition(this IEnumerable<CoverEntity> target, CoverSetCoverPositionParameters data)
    {
        target.CallService("set_cover_position", data);
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    ///<param name="target">The CoverEntity to call this service for</param>
    ///<param name="position">Position of the cover</param>
    public static void SetCoverPosition(this CoverEntity target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters{Position = position});
    }

    ///<summary>Move to specific position all or specified cover.</summary>
    ///<param name="target">The IEnumerable<CoverEntity> to call this service for</param>
    ///<param name="position">Position of the cover</param>
    public static void SetCoverPosition(this IEnumerable<CoverEntity> target, long position)
    {
        target.CallService("set_cover_position", new CoverSetCoverPositionParameters{Position = position});
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    public static void SetCoverTiltPosition(this CoverEntity target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    public static void SetCoverTiltPosition(this IEnumerable<CoverEntity> target, CoverSetCoverTiltPositionParameters data)
    {
        target.CallService("set_cover_tilt_position", data);
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    ///<param name="target">The CoverEntity to call this service for</param>
    ///<param name="tiltPosition">Tilt position of the cover.</param>
    public static void SetCoverTiltPosition(this CoverEntity target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters{TiltPosition = tiltPosition});
    }

    ///<summary>Move to specific position all or specified cover tilt.</summary>
    ///<param name="target">The IEnumerable<CoverEntity> to call this service for</param>
    ///<param name="tiltPosition">Tilt position of the cover.</param>
    public static void SetCoverTiltPosition(this IEnumerable<CoverEntity> target, long tiltPosition)
    {
        target.CallService("set_cover_tilt_position", new CoverSetCoverTiltPositionParameters{TiltPosition = tiltPosition});
    }

    ///<summary>Stop all or specified cover.</summary>
    public static void StopCover(this CoverEntity target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stop all or specified cover.</summary>
    public static void StopCover(this IEnumerable<CoverEntity> target)
    {
        target.CallService("stop_cover");
    }

    ///<summary>Stop all or specified cover.</summary>
    public static void StopCoverTilt(this CoverEntity target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Stop all or specified cover.</summary>
    public static void StopCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("stop_cover_tilt");
    }

    ///<summary>Toggle a cover open/closed.</summary>
    public static void Toggle(this CoverEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle a cover open/closed.</summary>
    public static void Toggle(this IEnumerable<CoverEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this CoverEntity target)
    {
        target.CallService("toggle_cover_tilt");
    }

    ///<summary>Toggle a cover tilt open/closed.</summary>
    public static void ToggleCoverTilt(this IEnumerable<CoverEntity> target)
    {
        target.CallService("toggle_cover_tilt");
    }
}

public static class FanEntityExtensionMethods
{
    ///<summary>Decrease the speed of the fan by one speed or a percentage_step.</summary>
    public static void DecreaseSpeed(this FanEntity target, FanDecreaseSpeedParameters data)
    {
        target.CallService("decrease_speed", data);
    }

    ///<summary>Decrease the speed of the fan by one speed or a percentage_step.</summary>
    public static void DecreaseSpeed(this IEnumerable<FanEntity> target, FanDecreaseSpeedParameters data)
    {
        target.CallService("decrease_speed", data);
    }

    ///<summary>Decrease the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentageStep">Decrease speed by a percentage.</param>
    public static void DecreaseSpeed(this FanEntity target, long? percentageStep = null)
    {
        target.CallService("decrease_speed", new FanDecreaseSpeedParameters{PercentageStep = percentageStep});
    }

    ///<summary>Decrease the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The IEnumerable<FanEntity> to call this service for</param>
    ///<param name="percentageStep">Decrease speed by a percentage.</param>
    public static void DecreaseSpeed(this IEnumerable<FanEntity> target, long? percentageStep = null)
    {
        target.CallService("decrease_speed", new FanDecreaseSpeedParameters{PercentageStep = percentageStep});
    }

    ///<summary>Increase the speed of the fan by one speed or a percentage_step.</summary>
    public static void IncreaseSpeed(this FanEntity target, FanIncreaseSpeedParameters data)
    {
        target.CallService("increase_speed", data);
    }

    ///<summary>Increase the speed of the fan by one speed or a percentage_step.</summary>
    public static void IncreaseSpeed(this IEnumerable<FanEntity> target, FanIncreaseSpeedParameters data)
    {
        target.CallService("increase_speed", data);
    }

    ///<summary>Increase the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentageStep">Increase speed by a percentage.</param>
    public static void IncreaseSpeed(this FanEntity target, long? percentageStep = null)
    {
        target.CallService("increase_speed", new FanIncreaseSpeedParameters{PercentageStep = percentageStep});
    }

    ///<summary>Increase the speed of the fan by one speed or a percentage_step.</summary>
    ///<param name="target">The IEnumerable<FanEntity> to call this service for</param>
    ///<param name="percentageStep">Increase speed by a percentage.</param>
    public static void IncreaseSpeed(this IEnumerable<FanEntity> target, long? percentageStep = null)
    {
        target.CallService("increase_speed", new FanIncreaseSpeedParameters{PercentageStep = percentageStep});
    }

    ///<summary>Oscillate the fan.</summary>
    public static void Oscillate(this FanEntity target, FanOscillateParameters data)
    {
        target.CallService("oscillate", data);
    }

    ///<summary>Oscillate the fan.</summary>
    public static void Oscillate(this IEnumerable<FanEntity> target, FanOscillateParameters data)
    {
        target.CallService("oscillate", data);
    }

    ///<summary>Oscillate the fan.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="oscillating">Flag to turn on/off oscillation.</param>
    public static void Oscillate(this FanEntity target, bool oscillating)
    {
        target.CallService("oscillate", new FanOscillateParameters{Oscillating = oscillating});
    }

    ///<summary>Oscillate the fan.</summary>
    ///<param name="target">The IEnumerable<FanEntity> to call this service for</param>
    ///<param name="oscillating">Flag to turn on/off oscillation.</param>
    public static void Oscillate(this IEnumerable<FanEntity> target, bool oscillating)
    {
        target.CallService("oscillate", new FanOscillateParameters{Oscillating = oscillating});
    }

    ///<summary>Set the fan rotation.</summary>
    public static void SetDirection(this FanEntity target, FanSetDirectionParameters data)
    {
        target.CallService("set_direction", data);
    }

    ///<summary>Set the fan rotation.</summary>
    public static void SetDirection(this IEnumerable<FanEntity> target, FanSetDirectionParameters data)
    {
        target.CallService("set_direction", data);
    }

    ///<summary>Set the fan rotation.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="direction">The direction to rotate.</param>
    public static void SetDirection(this FanEntity target, object direction)
    {
        target.CallService("set_direction", new FanSetDirectionParameters{Direction = direction});
    }

    ///<summary>Set the fan rotation.</summary>
    ///<param name="target">The IEnumerable<FanEntity> to call this service for</param>
    ///<param name="direction">The direction to rotate.</param>
    public static void SetDirection(this IEnumerable<FanEntity> target, object direction)
    {
        target.CallService("set_direction", new FanSetDirectionParameters{Direction = direction});
    }

    ///<summary>Set fan speed percentage.</summary>
    public static void SetPercentage(this FanEntity target, FanSetPercentageParameters data)
    {
        target.CallService("set_percentage", data);
    }

    ///<summary>Set fan speed percentage.</summary>
    public static void SetPercentage(this IEnumerable<FanEntity> target, FanSetPercentageParameters data)
    {
        target.CallService("set_percentage", data);
    }

    ///<summary>Set fan speed percentage.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="percentage">Percentage speed setting.</param>
    public static void SetPercentage(this FanEntity target, long percentage)
    {
        target.CallService("set_percentage", new FanSetPercentageParameters{Percentage = percentage});
    }

    ///<summary>Set fan speed percentage.</summary>
    ///<param name="target">The IEnumerable<FanEntity> to call this service for</param>
    ///<param name="percentage">Percentage speed setting.</param>
    public static void SetPercentage(this IEnumerable<FanEntity> target, long percentage)
    {
        target.CallService("set_percentage", new FanSetPercentageParameters{Percentage = percentage});
    }

    ///<summary>Set preset mode for a fan device.</summary>
    public static void SetPresetMode(this FanEntity target, FanSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Set preset mode for a fan device.</summary>
    public static void SetPresetMode(this IEnumerable<FanEntity> target, FanSetPresetModeParameters data)
    {
        target.CallService("set_preset_mode", data);
    }

    ///<summary>Set preset mode for a fan device.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="presetMode">New value of preset mode. eg: auto</param>
    public static void SetPresetMode(this FanEntity target, string presetMode)
    {
        target.CallService("set_preset_mode", new FanSetPresetModeParameters{PresetMode = presetMode});
    }

    ///<summary>Set preset mode for a fan device.</summary>
    ///<param name="target">The IEnumerable<FanEntity> to call this service for</param>
    ///<param name="presetMode">New value of preset mode. eg: auto</param>
    public static void SetPresetMode(this IEnumerable<FanEntity> target, string presetMode)
    {
        target.CallService("set_preset_mode", new FanSetPresetModeParameters{PresetMode = presetMode});
    }

    ///<summary>Toggle the fan on/off.</summary>
    public static void Toggle(this FanEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle the fan on/off.</summary>
    public static void Toggle(this IEnumerable<FanEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turn fan off.</summary>
    public static void TurnOff(this FanEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn fan off.</summary>
    public static void TurnOff(this IEnumerable<FanEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn fan on.</summary>
    public static void TurnOn(this FanEntity target, FanTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn fan on.</summary>
    public static void TurnOn(this IEnumerable<FanEntity> target, FanTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn fan on.</summary>
    ///<param name="target">The FanEntity to call this service for</param>
    ///<param name="speed">Speed setting. eg: high</param>
    ///<param name="percentage">Percentage speed setting.</param>
    ///<param name="presetMode">Preset mode setting. eg: auto</param>
    public static void TurnOn(this FanEntity target, string? speed = null, long? percentage = null, string? presetMode = null)
    {
        target.CallService("turn_on", new FanTurnOnParameters{Speed = speed, Percentage = percentage, PresetMode = presetMode});
    }

    ///<summary>Turn fan on.</summary>
    ///<param name="target">The IEnumerable<FanEntity> to call this service for</param>
    ///<param name="speed">Speed setting. eg: high</param>
    ///<param name="percentage">Percentage speed setting.</param>
    ///<param name="presetMode">Preset mode setting. eg: auto</param>
    public static void TurnOn(this IEnumerable<FanEntity> target, string? speed = null, long? percentage = null, string? presetMode = null)
    {
        target.CallService("turn_on", new FanTurnOnParameters{Speed = speed, Percentage = percentage, PresetMode = presetMode});
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggle an input boolean</summary>
    public static void Toggle(this InputBooleanEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle an input boolean</summary>
    public static void Toggle(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turn off an input boolean</summary>
    public static void TurnOff(this InputBooleanEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn off an input boolean</summary>
    public static void TurnOff(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn on an input boolean</summary>
    public static void TurnOn(this InputBooleanEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn on an input boolean</summary>
    public static void TurnOn(this IEnumerable<InputBooleanEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    public static void Toggle(this LightEntity target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    public static void Toggle(this IEnumerable<LightEntity> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">Color for the light in RGB-format. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this LightEntity target, float? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters{Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, Profile = profile, Flash = flash, Effect = effect});
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state. </summary>
    ///<param name="target">The IEnumerable<LightEntity> to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">Color for the light in RGB-format. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this IEnumerable<LightEntity> target, float? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters{Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, Profile = profile, Flash = flash, Effect = effect});
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this LightEntity target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<LightEntity> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">If the light should flash.</param>
    public static void TurnOff(this LightEntity target, float? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters{Transition = transition, Flash = flash});
    }

    ///<summary>Turns off one or more lights.</summary>
    ///<param name="target">The IEnumerable<LightEntity> to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">If the light should flash.</param>
    public static void TurnOff(this IEnumerable<LightEntity> target, float? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters{Transition = transition, Flash = flash});
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    public static void TurnOn(this LightEntity target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    public static void TurnOn(this IEnumerable<LightEntity> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    ///<param name="target">The LightEntity to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color for the light (based on RGB - red, green, blue).</param>
    ///<param name="rgbwColor">A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode and change its brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this LightEntity target, float? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, long? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters{Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect});
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already. </summary>
    ///<param name="target">The IEnumerable<LightEntity> to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color for the light (based on RGB - red, green, blue).</param>
    ///<param name="rgbwColor">A list containing four integers between 0 and 255 representing the RGBW (red, green, blue, white) color for the light. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">A list containing five integers between 0 and 255 representing the RGBWW (red, green, blue, cold white, warm white) color for the light. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human readable color name.</param>
    ///<param name="hsColor">Color for the light in hue/sat format. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color for the light in XY-format. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature for the light in mireds.</param>
    ///<param name="kelvin">Color temperature for the light in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessPct">Number indicating percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness and 100 is the maximum brightness supported by the light.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode and change its brightness, where 0 turns the light off, 1 is the minimum brightness and 255 is the maximum brightness supported by the light.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">If the light should flash.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this IEnumerable<LightEntity> target, float? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, long? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters{Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect});
    }
}

public static class LockEntityExtensionMethods
{
    ///<summary>Lock all or specified locks.</summary>
    public static void Lock(this LockEntity target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Lock all or specified locks.</summary>
    public static void Lock(this IEnumerable<LockEntity> target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Lock all or specified locks.</summary>
    ///<param name="target">The LockEntity to call this service for</param>
    ///<param name="code">An optional code to lock the lock with. eg: 1234</param>
    public static void Lock(this LockEntity target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters{Code = code});
    }

    ///<summary>Lock all or specified locks.</summary>
    ///<param name="target">The IEnumerable<LockEntity> to call this service for</param>
    ///<param name="code">An optional code to lock the lock with. eg: 1234</param>
    public static void Lock(this IEnumerable<LockEntity> target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters{Code = code});
    }

    ///<summary>Open all or specified locks.</summary>
    public static void Open(this LockEntity target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Open all or specified locks.</summary>
    public static void Open(this IEnumerable<LockEntity> target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Open all or specified locks.</summary>
    ///<param name="target">The LockEntity to call this service for</param>
    ///<param name="code">An optional code to open the lock with. eg: 1234</param>
    public static void Open(this LockEntity target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters{Code = code});
    }

    ///<summary>Open all or specified locks.</summary>
    ///<param name="target">The IEnumerable<LockEntity> to call this service for</param>
    ///<param name="code">An optional code to open the lock with. eg: 1234</param>
    public static void Open(this IEnumerable<LockEntity> target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters{Code = code});
    }

    ///<summary>Unlock all or specified locks.</summary>
    public static void Unlock(this LockEntity target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlock all or specified locks.</summary>
    public static void Unlock(this IEnumerable<LockEntity> target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlock all or specified locks.</summary>
    ///<param name="target">The LockEntity to call this service for</param>
    ///<param name="code">An optional code to unlock the lock with. eg: 1234</param>
    public static void Unlock(this LockEntity target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters{Code = code});
    }

    ///<summary>Unlock all or specified locks.</summary>
    ///<param name="target">The IEnumerable<LockEntity> to call this service for</param>
    ///<param name="code">An optional code to unlock the lock with. eg: 1234</param>
    public static void Unlock(this IEnumerable<LockEntity> target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters{Code = code});
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Send the media player the command to clear players playlist.</summary>
    public static void ClearPlaylist(this MediaPlayerEntity target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Send the media player the command to clear players playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    public static void Join(this MediaPlayerEntity target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    public static void Join(this IEnumerable<MediaPlayerEntity> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the target player. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this MediaPlayerEntity target, string groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters{GroupMembers = groupMembers});
    }

    ///<summary>Group players together. Only works on platforms with support for player groups.</summary>
    ///<param name="target">The IEnumerable<MediaPlayerEntity> to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the target player. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<MediaPlayerEntity> target, string groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters{GroupMembers = groupMembers});
    }

    ///<summary>Send the media player the command for next track.</summary>
    public static void MediaNextTrack(this MediaPlayerEntity target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Send the media player the command for next track.</summary>
    public static void MediaNextTrack(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Send the media player the command for pause.</summary>
    public static void MediaPause(this MediaPlayerEntity target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Send the media player the command for pause.</summary>
    public static void MediaPause(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Send the media player the command for play.</summary>
    public static void MediaPlay(this MediaPlayerEntity target)
    {
        target.CallService("media_play");
    }

    ///<summary>Send the media player the command for play.</summary>
    public static void MediaPlay(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_play");
    }

    ///<summary>Toggle media player play/pause state.</summary>
    public static void MediaPlayPause(this MediaPlayerEntity target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Toggle media player play/pause state.</summary>
    public static void MediaPlayPause(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Send the media player the command for previous track.</summary>
    public static void MediaPreviousTrack(this MediaPlayerEntity target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Send the media player the command for previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    public static void MediaSeek(this MediaPlayerEntity target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    public static void MediaSeek(this IEnumerable<MediaPlayerEntity> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="seekPosition">Position to seek to. The format is platform dependent.</param>
    public static void MediaSeek(this MediaPlayerEntity target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters{SeekPosition = seekPosition});
    }

    ///<summary>Send the media player the command to seek in current playing media.</summary>
    ///<param name="target">The IEnumerable<MediaPlayerEntity> to call this service for</param>
    ///<param name="seekPosition">Position to seek to. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<MediaPlayerEntity> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters{SeekPosition = seekPosition});
    }

    ///<summary>Send the media player the stop command.</summary>
    public static void MediaStop(this MediaPlayerEntity target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Send the media player the stop command.</summary>
    public static void MediaStop(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Send the media player the command for playing media.</summary>
    public static void PlayMedia(this MediaPlayerEntity target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Send the media player the command for playing media.</summary>
    public static void PlayMedia(this IEnumerable<MediaPlayerEntity> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Send the media player the command for playing media.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this MediaPlayerEntity target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters{MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce});
    }

    ///<summary>Send the media player the command for playing media.</summary>
    ///<param name="target">The IEnumerable<MediaPlayerEntity> to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Like image, music, tvshow, video, episode, channel or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<MediaPlayerEntity> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters{MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce});
    }

    ///<summary>Set repeat mode</summary>
    public static void RepeatSet(this MediaPlayerEntity target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Set repeat mode</summary>
    public static void RepeatSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Set repeat mode</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this MediaPlayerEntity target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters{Repeat = repeat});
    }

    ///<summary>Set repeat mode</summary>
    ///<param name="target">The IEnumerable<MediaPlayerEntity> to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<MediaPlayerEntity> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters{Repeat = repeat});
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    public static void SelectSoundMode(this MediaPlayerEntity target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<MediaPlayerEntity> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this MediaPlayerEntity target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters{SoundMode = soundMode});
    }

    ///<summary>Send the media player the command to change sound mode.</summary>
    ///<param name="target">The IEnumerable<MediaPlayerEntity> to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<MediaPlayerEntity> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters{SoundMode = soundMode});
    }

    ///<summary>Send the media player the command to change input source.</summary>
    public static void SelectSource(this MediaPlayerEntity target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Send the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<MediaPlayerEntity> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Send the media player the command to change input source.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this MediaPlayerEntity target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters{Source = source});
    }

    ///<summary>Send the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable<MediaPlayerEntity> to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<MediaPlayerEntity> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters{Source = source});
    }

    ///<summary>Set shuffling state.</summary>
    public static void ShuffleSet(this MediaPlayerEntity target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Set shuffling state.</summary>
    public static void ShuffleSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Set shuffling state.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="shuffle">True/false for enabling/disabling shuffle.</param>
    public static void ShuffleSet(this MediaPlayerEntity target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters{Shuffle = shuffle});
    }

    ///<summary>Set shuffling state.</summary>
    ///<param name="target">The IEnumerable<MediaPlayerEntity> to call this service for</param>
    ///<param name="shuffle">True/false for enabling/disabling shuffle.</param>
    public static void ShuffleSet(this IEnumerable<MediaPlayerEntity> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters{Shuffle = shuffle});
    }

    ///<summary>Toggles a media player power state.</summary>
    public static void Toggle(this MediaPlayerEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a media player power state.</summary>
    public static void Toggle(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turn a media player power off.</summary>
    public static void TurnOff(this MediaPlayerEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn a media player power off.</summary>
    public static void TurnOff(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn a media player power on.</summary>
    public static void TurnOn(this MediaPlayerEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn a media player power on.</summary>
    public static void TurnOn(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Unjoin the player from a group. Only works on platforms with support for player groups.</summary>
    public static void Unjoin(this MediaPlayerEntity target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Unjoin the player from a group. Only works on platforms with support for player groups.</summary>
    public static void Unjoin(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Turn a media player volume down.</summary>
    public static void VolumeDown(this MediaPlayerEntity target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Turn a media player volume down.</summary>
    public static void VolumeDown(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Mute a media player's volume.</summary>
    public static void VolumeMute(this MediaPlayerEntity target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mute a media player's volume.</summary>
    public static void VolumeMute(this IEnumerable<MediaPlayerEntity> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mute a media player's volume.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="isVolumeMuted">True/false for mute/unmute.</param>
    public static void VolumeMute(this MediaPlayerEntity target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters{IsVolumeMuted = isVolumeMuted});
    }

    ///<summary>Mute a media player's volume.</summary>
    ///<param name="target">The IEnumerable<MediaPlayerEntity> to call this service for</param>
    ///<param name="isVolumeMuted">True/false for mute/unmute.</param>
    public static void VolumeMute(this IEnumerable<MediaPlayerEntity> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters{IsVolumeMuted = isVolumeMuted});
    }

    ///<summary>Set a media player's volume level.</summary>
    public static void VolumeSet(this MediaPlayerEntity target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Set a media player's volume level.</summary>
    public static void VolumeSet(this IEnumerable<MediaPlayerEntity> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Set a media player's volume level.</summary>
    ///<param name="target">The MediaPlayerEntity to call this service for</param>
    ///<param name="volumeLevel">Volume level to set as float.</param>
    public static void VolumeSet(this MediaPlayerEntity target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters{VolumeLevel = volumeLevel});
    }

    ///<summary>Set a media player's volume level.</summary>
    ///<param name="target">The IEnumerable<MediaPlayerEntity> to call this service for</param>
    ///<param name="volumeLevel">Volume level to set as float.</param>
    public static void VolumeSet(this IEnumerable<MediaPlayerEntity> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters{VolumeLevel = volumeLevel});
    }

    ///<summary>Turn a media player volume up.</summary>
    public static void VolumeUp(this MediaPlayerEntity target)
    {
        target.CallService("volume_up");
    }

    ///<summary>Turn a media player volume up.</summary>
    public static void VolumeUp(this IEnumerable<MediaPlayerEntity> target)
    {
        target.CallService("volume_up");
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Set the value of a Number entity.</summary>
    public static void SetValue(this NumberEntity target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of a Number entity.</summary>
    public static void SetValue(this IEnumerable<NumberEntity> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Set the value of a Number entity.</summary>
    ///<param name="target">The NumberEntity to call this service for</param>
    ///<param name="value">The target value the entity should be set to. eg: 42</param>
    public static void SetValue(this NumberEntity target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters{Value = value});
    }

    ///<summary>Set the value of a Number entity.</summary>
    ///<param name="target">The IEnumerable<NumberEntity> to call this service for</param>
    ///<param name="value">The target value the entity should be set to. eg: 42</param>
    public static void SetValue(this IEnumerable<NumberEntity> target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters{Value = value});
    }
}

public static class PiHoleEntityExtensionMethods
{
    ///<summary>Disable configured Pi-hole(s) for an amount of time</summary>
    public static void Disable(this SwitchEntity target, PiHoleDisableParameters data)
    {
        target.CallService("disable", data);
    }

    ///<summary>Disable configured Pi-hole(s) for an amount of time</summary>
    public static void Disable(this IEnumerable<SwitchEntity> target, PiHoleDisableParameters data)
    {
        target.CallService("disable", data);
    }

    ///<summary>Disable configured Pi-hole(s) for an amount of time</summary>
    ///<param name="target">The SwitchEntity to call this service for</param>
    ///<param name="duration">Time that the Pi-hole should be disabled for eg: 00:00:15</param>
    public static void Disable(this SwitchEntity target, string duration)
    {
        target.CallService("disable", new PiHoleDisableParameters{Duration = duration});
    }

    ///<summary>Disable configured Pi-hole(s) for an amount of time</summary>
    ///<param name="target">The IEnumerable<SwitchEntity> to call this service for</param>
    ///<param name="duration">Time that the Pi-hole should be disabled for eg: 00:00:15</param>
    public static void Disable(this IEnumerable<SwitchEntity> target, string duration)
    {
        target.CallService("disable", new PiHoleDisableParameters{Duration = duration});
    }
}

public static class SceneEntityExtensionMethods
{
    ///<summary>Activate a scene.</summary>
    public static void TurnOn(this SceneEntity target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activate a scene.</summary>
    public static void TurnOn(this IEnumerable<SceneEntity> target, SceneTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Activate a scene.</summary>
    ///<param name="target">The SceneEntity to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    public static void TurnOn(this SceneEntity target, float? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters{Transition = transition});
    }

    ///<summary>Activate a scene.</summary>
    ///<param name="target">The IEnumerable<SceneEntity> to call this service for</param>
    ///<param name="transition">Transition duration it takes to bring devices to the state defined in the scene.</param>
    public static void TurnOn(this IEnumerable<SceneEntity> target, float? transition = null)
    {
        target.CallService("turn_on", new SceneTurnOnParameters{Transition = transition});
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Select an option of an select entity.</summary>
    public static void SelectOption(this SelectEntity target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Select an option of an select entity.</summary>
    public static void SelectOption(this IEnumerable<SelectEntity> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Select an option of an select entity.</summary>
    ///<param name="target">The SelectEntity to call this service for</param>
    ///<param name="option">Option to be selected. eg: "Item A"</param>
    public static void SelectOption(this SelectEntity target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters{Option = option});
    }

    ///<summary>Select an option of an select entity.</summary>
    ///<param name="target">The IEnumerable<SelectEntity> to call this service for</param>
    ///<param name="option">Option to be selected. eg: "Item A"</param>
    public static void SelectOption(this IEnumerable<SelectEntity> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters{Option = option});
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch state</summary>
    public static void Toggle(this SwitchEntity target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a switch state</summary>
    public static void Toggle(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turn a switch off</summary>
    public static void TurnOff(this SwitchEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn a switch off</summary>
    public static void TurnOff(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turn a switch on</summary>
    public static void TurnOn(this SwitchEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turn a switch on</summary>
    public static void TurnOn(this IEnumerable<SwitchEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this UpdateEntity target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<UpdateEntity> target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Install an update for this device or service</summary>
    public static void Install(this UpdateEntity target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Install an update for this device or service</summary>
    public static void Install(this IEnumerable<UpdateEntity> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Install an update for this device or service</summary>
    ///<param name="target">The UpdateEntity to call this service for</param>
    ///<param name="version">Version to install, if omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">Backup before installing the update, if supported by the integration.</param>
    public static void Install(this UpdateEntity target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters{Version = version, Backup = backup});
    }

    ///<summary>Install an update for this device or service</summary>
    ///<param name="target">The IEnumerable<UpdateEntity> to call this service for</param>
    ///<param name="version">Version to install, if omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">Backup before installing the update, if supported by the integration.</param>
    public static void Install(this IEnumerable<UpdateEntity> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters{Version = version, Backup = backup});
    }

    ///<summary>Mark currently available update as skipped.</summary>
    public static void Skip(this UpdateEntity target)
    {
        target.CallService("skip");
    }

    ///<summary>Mark currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<UpdateEntity> target)
    {
        target.CallService("skip");
    }
}